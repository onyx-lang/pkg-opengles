package opengles

use package core { cptr }

#if #defined((package runtime).Generated_Foreign_Info) {
    foreign_block :: __foreign_block
} else {
    #library "onyx_opengles"
}

GLGetProcAddress :: #distinct i64 // (name: cstr) -> ^void

#local __foreign_block :: #foreign "onyx_opengles" {
    // glInit MUST be called before any other GL calls, as it initializes all GL function pointers
    // using the load_function provided. Currently, the only supported library that provides this
    // is glfwGetLoadProcAddress.
    glInit :: (load_function: GLGetProcAddress) -> void ---

    glActiveTexture :: (texture: GLenum) -> void ---
    glAttachShader :: (program: GLuint, shader: GLuint) -> void ---
    glBindAttribLocation :: (program: GLuint, index: GLuint, name: ^GLchar) -> void ---
    glBindBuffer :: (target: GLenum, buffer: GLint) -> void ---
    glBindFramebuffer :: (target: GLenum, framebuffer: GLint) -> void ---
    glBindRenderbuffer :: (target: GLenum, renderbuffer: GLint) -> void ---
    glBindTexture :: (target: GLenum, texture: GLint) -> void ---
    glBlendColor :: (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> void ---
    glBlendEquation :: (mode: GLenum) -> void ---
    glBlendEquationSeparate :: (modeRGB: GLenum, modeAlpha: GLenum) -> void ---
    glBlendFunc :: (sfactor: GLenum, dfactor: GLenum) -> void ---
    glBlendFuncSeparate :: (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) -> void ---
    glBufferData :: (target: GLenum, size: GLsizeiptr, data: rawptr, usage: GLenum) -> void ---
    glBufferSubData :: (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: rawptr) -> void ---
    glCheckFramebufferStatus :: (target: GLenum) -> GLenum ---
    glClear :: (mask: GLbitfield) -> void ---
    glClearColor :: (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> void ---
    glClearDepthf :: (d: GLfloat) -> void ---
    glClearStencil :: (s: GLint) -> void ---
    glColorMask :: (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) -> void ---
    glCompileShader :: (shader: GLuint) -> void ---
    glCompressedTexImage2D :: (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: rawptr) -> void ---
    glCompressedTexSubImage2D :: (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: rawptr) -> void ---
    glCopyTexImage2D :: (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> void ---
    glCopyTexSubImage2D :: (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void ---
    glCreateProgram :: () -> GLuint ---
    glCreateShader :: (type: GLenum) -> GLuint ---
    glCullFace :: (mode: GLenum) -> void ---
    glDeleteBuffers :: (n: GLsizei, buffers: ^GLuint) -> void ---
    glDeleteFramebuffers :: (n: GLsizei, framebuffers: ^GLuint) -> void ---
    glDeleteProgram :: (program: GLuint) -> void ---
    glDeleteRenderbuffers :: (n: GLsizei, renderbuffers: ^GLuint) -> void ---
    glDeleteShader :: (shader: GLuint) -> void ---
    glDeleteTextures :: (n: GLsizei, textures: ^GLuint) -> void ---
    glDepthFunc :: (func: GLenum) -> void ---
    glDepthMask :: (flag: GLboolean) -> void ---
    glDepthRangef :: (n: GLfloat, f: GLfloat) -> void ---
    glDetachShader :: (program: GLuint, shader: GLuint) -> void ---
    glDisable :: (cap: GLenum) -> void ---
    glDisableVertexAttribArray :: (index: GLuint) -> void ---
    glDrawArrays :: (mode: GLenum, first: GLint, count: GLsizei) -> void ---
    glDrawElements :: (mode: GLenum, count: GLsizei, type: GLenum, indices: rawptr) -> void ---
    glEnable :: (cap: GLenum) -> void ---
    glEnableVertexAttribArray :: (index: GLuint) -> void ---
    glFinish :: () -> void ---
    glFlush :: () -> void ---
    glFramebufferRenderbuffer :: (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> void ---
    glFramebufferTexture2D :: (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> void ---
    glFrontFace :: (mode: GLenum) -> void ---
    glGenBuffers :: (n: GLsizei, buffers: ^GLuint) -> void ---
    glGenerateMipmap :: (target: GLenum) -> void ---
    glGenFramebuffers :: (n: GLsizei, framebuffers: ^GLuint) -> void ---
    glGenRenderbuffers :: (n: GLsizei, renderbuffers: ^GLuint) -> void ---
    glGenTextures :: (n: GLsizei, textures: ^GLuint) -> void ---
    glGetActiveAttrib :: (program: GLuint, index: GLuint, bufSize: GLsizei, length: ^GLsizei, size: ^GLint, type: ^GLenum, name: ^GLchar) -> void ---
    glGetActiveUniform :: (program: GLuint, index: GLuint, bufSize: GLsizei, length: ^GLsizei, size: ^GLint, type: ^GLenum, name: ^GLchar) -> void ---
    glGetAttachedShaders :: (program: GLuint, maxCount: GLsizei, count: ^GLsizei, shaders: ^GLuint) -> void ---
    glGetAttribLocation :: (program: GLuint, name: ^GLchar) -> GLint ---
    glGetBooleanv :: (pname: GLenum, data: ^GLboolean) -> void ---
    glGetBufferParameteriv :: (target: GLenum, pname: GLenum, params: ^GLint) -> void ---
    glGetError :: () -> GLenum ---
    glGetFloatv :: (pname: GLenum, data: ^GLfloat) -> void ---
    glGetFramebufferAttachmentParameteriv :: (target: GLenum, attachment: GLenum, pname: GLenum, params: ^GLint) -> void ---
    glGetIntegerv :: (pname: GLenum, data: ^GLint) -> void ---
    glGetProgramiv :: (program: GLuint, pname: GLenum, params: ^GLint) -> void ---
    glGetProgramInfoLog :: (program: GLuint, bufSize: GLsizei, length: ^GLsizei, infoLog: ^GLchar) -> void ---
    glGetRenderbufferParameteriv :: (target: GLenum, pname: GLenum, params: ^GLint) -> void ---
    glGetShaderiv :: (shader: GLuint, pname: GLenum, params: ^GLint) -> void ---
    glGetShaderInfoLog :: (shader: GLuint, bufSize: GLsizei, length: ^GLsizei, infoLog: ^GLchar) -> void ---
    glGetShaderPrecisionFormat :: (shadertype: GLenum, precisiontype: GLenum, range: ^GLint, precision: ^GLint) -> void ---
    glGetShaderSource :: (shader: GLuint, bufSize: GLsizei, length: ^GLsizei, source: ^GLchar) -> void ---
    glGetString :: (name: GLenum) -> cptr(GLubyte) ---
    glGetTexParameterfv :: (target: GLenum, pname: GLenum, params: ^GLfloat) -> void ---
    glGetTexParameteriv :: (target: GLenum, pname: GLenum, params: ^GLint) -> void ---
    glGetUniformfv :: (program: GLuint, location: GLint, params: ^GLfloat) -> void ---
    glGetUniformiv :: (program: GLuint, location: GLint, params: ^GLint) -> void ---
    glGetUniformLocation :: (program: GLuint, name: ^GLchar) -> GLint ---
    glGetVertexAttribfv :: (index: GLuint, pname: GLenum, params: ^GLfloat) -> void ---
    glGetVertexAttribiv :: (index: GLuint, pname: GLenum, params: ^GLint) -> void ---
    glGetVertexAttribPointerv :: (index: GLuint, pname: GLenum, pointer: ^u32) -> void ---
    glHint :: (target: GLenum, mode: GLenum) -> void ---
    glIsBuffer :: (buffer: GLuint) -> GLboolean ---
    glIsEnabled :: (cap: GLenum) -> GLboolean ---
    glIsFramebuffer :: (framebuffer: GLuint) -> GLboolean ---
    glIsProgram :: (program: GLuint) -> GLboolean ---
    glIsRenderbuffer :: (renderbuffer: GLuint) -> GLboolean ---
    glIsShader :: (shader: GLuint) -> GLboolean ---
    glIsTexture :: (texture: GLuint) -> GLboolean ---
    glLineWidth :: (width: GLfloat) -> void ---
    glLinkProgram :: (program: GLuint) -> void ---
    glPixelStorei :: (pname: GLenum, param: GLint) -> void ---
    glPolygonOffset :: (factor: GLfloat, units: GLfloat) -> void ---
    glReadPixels :: (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: rawptr) -> void ---
    glReleaseShaderCompiler :: () -> void ---
    glRenderbufferStorage :: (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void ---
    glSampleCoverage :: (value: GLfloat, invert: GLboolean) -> void ---
    glScissor :: (x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void ---
    glShaderBinary :: (count: GLsizei, shaders: ^GLuint, binaryformat: GLenum, binary: rawptr, length: GLsizei) -> void ---
    glShaderSource :: (shader: GLuint, count: GLsizei, string: ^cptr(GLchar), length: ^GLint) -> void ---
    glStencilFunc :: (func: GLenum, ref: GLint, mask: GLuint) -> void ---
    glStencilFuncSeparate :: (face: GLenum, func: GLenum, ref: GLint, mask: GLuint) -> void ---
    glStencilMask :: (mask: GLuint) -> void ---
    glStencilMaskSeparate :: (face: GLenum, mask: GLuint) -> void ---
    glStencilOp :: (fail: GLenum, zfail: GLenum, zpass: GLenum) -> void ---
    glStencilOpSeparate :: (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) -> void ---
    glTexImage2D :: (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: rawptr) -> void ---
    glTexParameterf :: (target: GLenum, pname: GLenum, param: GLfloat) -> void ---
    glTexParameterfv :: (target: GLenum, pname: GLenum, params: ^GLfloat) -> void ---
    glTexParameteri :: (target: GLenum, pname: GLenum, param: GLint) -> void ---
    glTexParameteriv :: (target: GLenum, pname: GLenum, params: ^GLint) -> void ---
    glTexSubImage2D :: (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: rawptr) -> void ---
    glUniform1f :: (location: GLint, v0: GLfloat) -> void ---
    glUniform1fv :: (location: GLint, count: GLsizei, value: ^GLfloat) -> void ---
    glUniform1i :: (location: GLint, v0: GLint) -> void ---
    glUniform1iv :: (location: GLint, count: GLsizei, value: ^GLint) -> void ---
    glUniform2f :: (location: GLint, v0: GLfloat, v1: GLfloat) -> void ---
    glUniform2fv :: (location: GLint, count: GLsizei, value: ^GLfloat) -> void ---
    glUniform2i :: (location: GLint, v0: GLint, v1: GLint) -> void ---
    glUniform2iv :: (location: GLint, count: GLsizei, value: ^GLint) -> void ---
    glUniform3f :: (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> void ---
    glUniform3fv :: (location: GLint, count: GLsizei, value: ^GLfloat) -> void ---
    glUniform3i :: (location: GLint, v0: GLint, v1: GLint, v2: GLint) -> void ---
    glUniform3iv :: (location: GLint, count: GLsizei, value: ^GLint) -> void ---
    glUniform4f :: (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> void ---
    glUniform4fv :: (location: GLint, count: GLsizei, value: ^GLfloat) -> void ---
    glUniform4i :: (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> void ---
    glUniform4iv :: (location: GLint, count: GLsizei, value: ^GLint) -> void ---
    glUniformMatrix2fv :: (location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glUniformMatrix3fv :: (location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glUniformMatrix4fv :: (location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glUseProgram :: (program: GLuint) -> void ---
    glValidateProgram :: (program: GLuint) -> void ---
    glVertexAttrib1f :: (index: GLuint, x: GLfloat) -> void ---
    glVertexAttrib1fv :: (index: GLuint, v: ^GLfloat) -> void ---
    glVertexAttrib2f :: (index: GLuint, x: GLfloat, y: GLfloat) -> void ---
    glVertexAttrib2fv :: (index: GLuint, v: ^GLfloat) -> void ---
    glVertexAttrib3f :: (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> void ---
    glVertexAttrib3fv :: (index: GLuint, v: ^GLfloat) -> void ---
    glVertexAttrib4f :: (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> void ---
    glVertexAttrib4fv :: (index: GLuint, v: ^GLfloat) -> void ---
    glVertexAttribPointer :: (index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, pointer: u32) -> void --- // The final parameter is not a pointer, as that does not follow with the FFI.
    glViewport :: (x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void ---


    // OpenGL ES 3.0
    glReadBuffer :: (src: GLenum) -> void ---
    glDrawRangeElements :: (mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: rawptr) -> void ---
    glTexImage3D :: (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: rawptr) -> void ---
    glTexSubImage3D :: (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: rawptr) -> void ---
    glCopyTexSubImage3D :: (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void ---
    glCompressedTexImage3D :: (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: rawptr) -> void ---
    glCompressedTexSubImage3D :: (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: rawptr) -> void ---
    glGenQueries :: (n: GLsizei, ids: ^GLuint) -> void ---
    glDeleteQueries :: (n: GLsizei, ids: ^GLuint) -> void ---
    glIsQuery :: (id: GLuint) -> GLboolean ---
    glBeginQuery :: (target: GLenum, id: GLuint) -> void ---
    glEndQuery :: (target: GLenum) -> void ---
    glGetQueryiv :: (target: GLenum, pname: GLenum, params: ^GLint) -> void ---
    glGetQueryObjectuiv :: (id: GLuint, pname: GLenum, params: ^GLuint) -> void ---
    glUnmapBuffer :: (target: GLenum) -> GLboolean ---
    glGetBufferPointerv :: (target: GLenum, pname: GLenum, params: ^rawptr) -> void ---
    glDrawBuffers :: (n: GLsizei, bufs: ^GLenum) -> void ---
    glUniformMatrix2x3fv :: (location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glUniformMatrix3x2fv :: (location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glUniformMatrix2x4fv :: (location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glUniformMatrix4x2fv :: (location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glUniformMatrix3x4fv :: (location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glUniformMatrix4x3fv :: (location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glBlitFramebuffer :: (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> void ---
    glRenderbufferStorageMultisample :: (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void ---
    glFramebufferTextureLayer :: (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> void ---
    glMapBufferRange :: (target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> rawptr ---
    glFlushMappedBufferRange :: (target: GLenum, offset: GLintptr, length: GLsizeiptr) -> void ---
    glBindVertexArray :: (array: GLint) -> void ---
    glDeleteVertexArrays :: (n: GLsizei, arrays: ^GLuint) -> void ---
    glGenVertexArrays :: (n: GLsizei, arrays: ^GLuint) -> void ---
    glIsVertexArray :: (array: GLuint) -> GLboolean ---
    glGetIntegeri_v :: (target: GLenum, index: GLuint, data: ^GLint) -> void ---
    glBeginTransformFeedback :: (primitiveMode: GLenum) -> void ---
    glEndTransformFeedback :: () -> void ---
    glBindBufferRange :: (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> void ---
    glBindBufferBase :: (target: GLenum, index: GLuint, buffer: GLuint) -> void ---
    glTransformFeedbackVaryings :: (program: GLuint, count: GLsizei, varyings: ^^GLchar, bufferMode: GLenum) -> void ---
    glGetTransformFeedbackVarying :: (program: GLuint, index: GLuint, bufSize: GLsizei, length: ^GLsizei, size: ^GLsizei, type: ^GLenum, name: ^GLchar) -> void ---
    glVertexAttribIPointer :: (index: GLuint, size: GLint, type: GLenum, stride: GLsizei, pointer: u32) -> void ---
    glGetVertexAttribIiv :: (index: GLuint, pname: GLenum, params: ^GLint) -> void ---
    glGetVertexAttribIuiv :: (index: GLuint, pname: GLenum, params: ^GLuint) -> void ---
    glVertexAttribI4i :: (index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> void ---
    glVertexAttribI4ui :: (index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> void ---
    glVertexAttribI4iv :: (index: GLuint, v: ^GLint) -> void ---
    glVertexAttribI4uiv :: (index: GLuint, v: ^GLuint) -> void ---
    glGetUniformuiv :: (program: GLuint, location: GLint, params: ^GLuint) -> void ---
    glGetFragDataLocation :: (program: GLuint, name: ^GLchar) -> GLint ---
    glUniform1ui :: (location: GLint, v0: GLuint) -> void ---
    glUniform2ui :: (location: GLint, v0: GLuint, v1: GLuint) -> void ---
    glUniform3ui :: (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> void ---
    glUniform4ui :: (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> void ---
    glUniform1uiv :: (location: GLint, count: GLsizei, value: ^GLuint) -> void ---
    glUniform2uiv :: (location: GLint, count: GLsizei, value: ^GLuint) -> void ---
    glUniform3uiv :: (location: GLint, count: GLsizei, value: ^GLuint) -> void ---
    glUniform4uiv :: (location: GLint, count: GLsizei, value: ^GLuint) -> void ---
    glClearBufferiv :: (buffer: GLenum, drawbuffer: GLint, value: ^GLint) -> void ---
    glClearBufferuiv :: (buffer: GLenum, drawbuffer: GLint, value: ^GLuint) -> void ---
    glClearBufferfv :: (buffer: GLenum, drawbuffer: GLint, value: ^GLfloat) -> void ---
    glClearBufferfi :: (buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) -> void ---
    glGetStringi :: (name: GLenum, index: GLuint) -> cptr(GLubyte) ---
    glCopyBufferSubData :: (readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) -> void ---
    glGetUniformIndices :: (program: GLuint, uniformCount: GLsizei, uniformNames: ^cptr(GLchar), uniformIndices: ^GLuint) -> void ---
    glGetActiveUniformsiv :: (program: GLuint, uniformCount: GLsizei, uniformIndices: ^GLuint, pname: GLenum, params: ^GLint) -> void ---
    glGetUniformBlockIndex :: (program: GLuint, uniformBlockName: ^GLchar) -> GLuint ---
    glGetActiveUniformBlockiv :: (program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: ^GLint) -> void ---
    glGetActiveUniformBlockName :: (program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: ^GLsizei, uniformBlockName: ^GLchar) -> void ---
    glUniformBlockBinding :: (program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) -> void ---
    glDrawArraysInstanced :: (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei) -> void ---
    glDrawElementsInstanced :: (mode: GLenum, count: GLsizei, type: GLenum, indices: rawptr, instancecount: GLsizei) -> void ---
    // glFenceSync :: (condition: GLenum, flags: GLbitfield) -> GLsync ---
    // glIsSync :: (sync: GLsync) -> GLboolean ---
    // glDeleteSync :: (sync: GLsync) -> void ---
    // glClientWaitSync :: (sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> GLenum ---
    // glWaitSync :: (sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> void ---
    glGetInteger64v :: (pname: GLenum, data: ^GLint64) -> void ---
    // glGetSynciv :: (sync: GLsync, pname: GLenum, bufSize: GLsizei, length: ^GLsizei, values: ^GLint) -> void ---
    glGetInteger64i_v :: (target: GLenum, index: GLuint, data: ^GLint64) -> void ---
    glGetBufferParameteri64v :: (target: GLenum, pname: GLenum, params: ^GLint64) -> void ---
    glGenSamplers :: (count: GLsizei, samplers: ^GLuint) -> void ---
    glDeleteSamplers :: (count: GLsizei, samplers: ^GLuint) -> void ---
    glIsSampler :: (sampler: GLuint) -> GLboolean ---
    glBindSampler :: (unit: GLuint, sampler: GLuint) -> void ---
    glSamplerParameteri :: (sampler: GLuint, pname: GLenum, param: GLint) -> void ---
    glSamplerParameteriv :: (sampler: GLuint, pname: GLenum, param: ^GLint) -> void ---
    glSamplerParameterf :: (sampler: GLuint, pname: GLenum, param: GLfloat) -> void ---
    glSamplerParameterfv :: (sampler: GLuint, pname: GLenum, param: ^GLfloat) -> void ---
    glGetSamplerParameteriv :: (sampler: GLuint, pname: GLenum, params: ^GLint) -> void ---
    glGetSamplerParameterfv :: (sampler: GLuint, pname: GLenum, params: ^GLfloat) -> void ---
    glVertexAttribDivisor :: (index: GLuint, divisor: GLuint) -> void ---
    glBindTransformFeedback :: (target: GLenum, id: GLuint) -> void ---
    glDeleteTransformFeedbacks :: (n: GLsizei, ids: ^GLuint) -> void ---
    glGenTransformFeedbacks :: (n: GLsizei, ids: ^GLuint) -> void ---
    glIsTransformFeedback :: (id: GLuint) -> GLboolean ---
    glPauseTransformFeedback :: () -> void ---
    glResumeTransformFeedback :: () -> void ---
    glGetProgramBinary :: (program: GLuint, bufSize: GLsizei, length: ^GLsizei, binaryFormat: ^GLenum, binary: rawptr) -> void ---
    glProgramBinary :: (program: GLuint, binaryFormat: GLenum, binary: rawptr, length: GLsizei) -> void ---
    glProgramParameteri :: (program: GLuint, pname: GLenum, value: GLint) -> void ---
    glInvalidateFramebuffer :: (target: GLenum, numAttachments: GLsizei, attachments: ^GLenum) -> void ---
    glInvalidateSubFramebuffer :: (target: GLenum, numAttachments: GLsizei, attachments: ^GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void ---
    glTexStorage2D :: (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void ---
    glTexStorage3D :: (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> void ---
    glGetInternalformativ :: (target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: ^GLint) -> void ---

    // OpenGL ES 3.1
    glActiveShaderProgram :: (pipeline: GLuint, program: GLuint) -> void ---
    glBindImageTexture :: (unit, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum) -> void ---
    glBindProgramPipeline :: (pipeline: GLuint) -> void ---
    glBindVertexBuffer :: (bindingindex, buffer: GLuint, offset: GLintptr, stride: GLsizei) -> void ---
    glCreateShaderProgramv :: (type: GLenum, count: GLsizei, strings: ^cptr(GLchar)) -> void ---
    glDeleteProgramPipelines :: (n: GLsizei, framebuffers: ^GLuint) -> void ---
    glDispatchCompute :: (num_groups_x, num_groups_y, num_groups_z: GLuint) -> void ---
    glDispatchComputeIndirect :: (indirect: ^i32) -> void ---
    glDrawArraysIndirect :: (mode: GLenum, indirect: rawptr) -> void ---
    glDrawElementsIndirect :: (mode, type: GLenum, indirect: rawptr) -> void ---
    glFramebufferParameteri :: (target, pname: GLenum, param: GLint) -> void ---
    glGenProgramPipelines :: (n: GLsizei, pipelines: ^GLuint) -> void ---
    glGetBooleani :: (target: GLenum, index: GLuint, data: ^GLboolean) -> void ---
    glGetFramebufferParameteriv :: (target, pname: GLenum, params: ^GLint) -> void ---
    glGetMultisamplefv :: (pname: GLenum, index: GLuint, val: ^GLfloat) -> void ---
    glGetProgramInterfaceiv :: (program: GLuint, programInterface, pname: GLenum, params: ^GLint) -> void ---
    glGetProgramPipelineInfoLog :: (pipeline: GLuint, bufSize: GLsizei, length: ^GLsizei, infoLog: ^GLchar) -> void ---
    glGetProgramPipelineiv :: (pipeline: GLuint, pname: GLenum, params: ^GLint) -> void ---
    glGetProgramResourceIndex :: (program: GLuint, programInterface: GLenum, name: ^GLchar) -> GLuint ---
    glGetProgramResourceLocation :: (program: GLuint, programInterface: GLenum, name: ^GLchar) -> GLint ---
    glGetProgramResourceName :: (program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: ^GLsizei, name: ^GLchar) -> void ---
    glGetProgramResourceiv :: (program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: ^GLenum, count: GLsizei, length: ^GLsizei, params: ^GLint) -> void ---
    glGetTexLevelParameterfv :: (target: GLenum, level: GLint, pname: GLenum, params: ^GLfloat) -> void ---
    glGetTexLevelParameteriv :: (target: GLenum, level: GLint, pname: GLenum, params: ^GLint) -> void ---
    glIsProgramPipeline :: (pipeline: GLuint) -> GLboolean ---
    glMemoryBarrier :: (barries: GLbitfield) -> void ---
    glMemoryBarrierByRegion :: (barries: GLbitfield) -> void ---
    glProgramUniform1f  :: (program: GLuint, location: GLint, v0: GLfloat) -> void ---
    glProgramUniform1i  :: (program: GLuint, location: GLint, v0: GLint) -> void ---
    glProgramUniform1ui :: (program: GLuint, location: GLint, v0: GLuint) -> void ---
    glProgramUniform2f  :: (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) -> void ---
    glProgramUniform2i  :: (program: GLuint, location: GLint, v0: GLint, v1: GLint) -> void ---
    glProgramUniform2ui :: (program: GLuint, location: GLint, v0: GLuint, v1: GLuint) -> void ---
    glProgramUniform3f  :: (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v3: GLfloat) -> void ---
    glProgramUniform3i  :: (program: GLuint, location: GLint, v0: GLint, v1: GLint, v3: GLint) -> void ---
    glProgramUniform3ui :: (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v3: GLuint) -> void ---
    glProgramUniform4f  :: (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v3: GLfloat, v4: GLfloat) -> void ---
    glProgramUniform4i  :: (program: GLuint, location: GLint, v0: GLint, v1: GLint, v3: GLint, v4: GLint) -> void ---
    glProgramUniform4ui :: (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v3: GLuint, v4: GLuint) -> void ---
    glProgramUniform1fv  :: (program: GLuint, location: GLint, count: GLsizei, value: ^GLfloat) -> void ---
    glProgramUniform1iv  :: (program: GLuint, location: GLint, count: GLsizei, value: ^GLint) -> void ---
    glProgramUniform1uiv :: (program: GLuint, location: GLint, count: GLsizei, value: ^GLuint) -> void ---
    glProgramUniform2fv  :: (program: GLuint, location: GLint, count: GLsizei, value: ^GLfloat) -> void ---
    glProgramUniform2iv  :: (program: GLuint, location: GLint, count: GLsizei, value: ^GLint) -> void ---
    glProgramUniform2uiv :: (program: GLuint, location: GLint, count: GLsizei, value: ^GLuint) -> void ---
    glProgramUniform3fv  :: (program: GLuint, location: GLint, count: GLsizei, value: ^GLfloat) -> void ---
    glProgramUniform3iv  :: (program: GLuint, location: GLint, count: GLsizei, value: ^GLint) -> void ---
    glProgramUniform3uiv :: (program: GLuint, location: GLint, count: GLsizei, value: ^GLuint) -> void ---
    glProgramUniform4fv  :: (program: GLuint, location: GLint, count: GLsizei, value: ^GLfloat) -> void ---
    glProgramUniform4iv  :: (program: GLuint, location: GLint, count: GLsizei, value: ^GLint) -> void ---
    glProgramUniform4uiv :: (program: GLuint, location: GLint, count: GLsizei, value: ^GLuint) -> void ---
    glProgramUniformMatrix2fv   :: (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glProgramUniformMatrix2x3fv :: (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glProgramUniformMatrix2x4fv :: (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glProgramUniformMatrix3fv   :: (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glProgramUniformMatrix3x2fv :: (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glProgramUniformMatrix3x4fv :: (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glProgramUniformMatrix4fv   :: (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glProgramUniformMatrix4x2fv :: (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glProgramUniformMatrix4x3fv :: (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glSampleMaski :: (maskNumber: GLuint, mask: GLbitfield) -> void ---
    glTexStorage2DMultisample :: (target: GLenum, samples: GLsizei, internalFormat: GLenum, width, height: GLsizei, fixedsamplelocations: GLboolean) -> void ---
    glUseProgramStages :: (pipeline: GLuint, stages: GLbitfield, program: GLuint) -> void ---
    glValidateProgramPipeline :: (pipeline: GLuint) -> void ---
    glVertexAttribBinding :: (attribindex: GLuint, bindingindex: GLuint) -> void ---
    glVertexAttribFormat :: (attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint) -> void ---
    glVertexAttribIFormat :: (attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) -> void ---
    glVertexBindingDivisor :: (bindingindex: GLuint, divisor: GLuint) -> void ---
}

GLbyte :: i8;
GLclampf :: f32;
GLfixed :: i32;
GLshort :: i16;
GLushort :: u16;
GLvoid :: void;
GLsync :: #distinct u64;
GLint64 :: i64;
GLuint64 :: u64;
GLenum :: i32;
GLuint :: u32;
GLchar :: u8;
GLfloat :: f32;
GLsizeiptr :: i32;
GLintptr:: i32;
GLbitfield :: u32;
GLint :: i32;
GLboolean :: bool;
GLsizei :: i32;
GLubyte :: u8;


GL_ACTIVE_ATOMIC_COUNTER_BUFFERS :: 0x92D
GL_ACTIVE_ATTRIBUTES :: 0x8B8
GL_ACTIVE_ATTRIBUTE_MAX_LENGTH :: 0x8B8
GL_ACTIVE_PROGRAM :: 0x825
GL_ACTIVE_RESOURCES :: 0x92F
GL_ACTIVE_TEXTURE :: 0x84E
GL_ACTIVE_UNIFORMS :: 0x8B8
GL_ACTIVE_UNIFORM_BLOCKS :: 0x8A3
GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH :: 0x8A3
GL_ACTIVE_UNIFORM_MAX_LENGTH :: 0x8B8
GL_ACTIVE_VARIABLES :: 0x930
GL_ALIASED_LINE_WIDTH_RANGE :: 0x846
GL_ALIASED_POINT_SIZE_RANGE :: 0x846
GL_ALL_BARRIER_BITS :: 0xFFFFFFF
GL_ALL_SHADER_BITS :: 0xFFFFFFF
GL_ALPHA :: 0x190
GL_ALPHA_BITS :: 0x0D5
GL_ALREADY_SIGNALED :: 0x911
GL_ALWAYS :: 0x020
GL_ANY_SAMPLES_PASSED :: 0x8C2
GL_ANY_SAMPLES_PASSED_CONSERVATIVE :: 0x8D6
GL_ARRAY_BUFFER :: 0x889
GL_ARRAY_BUFFER_BINDING :: 0x889
GL_ARRAY_SIZE :: 0x92F
GL_ARRAY_STRIDE :: 0x92F
GL_ATOMIC_COUNTER_BARRIER_BIT :: 0x0000100
GL_ATOMIC_COUNTER_BUFFER :: 0x92C
GL_ATOMIC_COUNTER_BUFFER_BINDING :: 0x92C
GL_ATOMIC_COUNTER_BUFFER_INDEX :: 0x930
GL_ATOMIC_COUNTER_BUFFER_SIZE :: 0x92C
GL_ATOMIC_COUNTER_BUFFER_START :: 0x92C
GL_ATTACHED_SHADERS :: 0x8B8
GL_BACK :: 0x040
GL_BLEND :: 0x0BE
GL_BLEND_COLOR :: 0x800
GL_BLEND_DST_ALPHA :: 0x80C
GL_BLEND_DST_RGB :: 0x80C
GL_BLEND_EQUATION :: 0x800
GL_BLEND_EQUATION_ALPHA :: 0x883
GL_BLEND_EQUATION_RGB :: 0x800
GL_BLEND_SRC_ALPHA :: 0x80C
GL_BLEND_SRC_RGB :: 0x80C
GL_BLOCK_INDEX :: 0x92F
GL_BLUE :: 0x190
GL_BLUE_BITS :: 0x0D5
GL_BOOL :: 0x8B5
GL_BOOL_VEC2 :: 0x8B5
GL_BOOL_VEC3 :: 0x8B5
GL_BOOL_VEC4 :: 0x8B5
GL_BUFFER_ACCESS_FLAGS :: 0x911
GL_BUFFER_BINDING :: 0x930
GL_BUFFER_DATA_SIZE :: 0x930
GL_BUFFER_MAPPED :: 0x88B
GL_BUFFER_MAP_LENGTH :: 0x912
GL_BUFFER_MAP_OFFSET :: 0x912
GL_BUFFER_MAP_POINTER :: 0x88B
GL_BUFFER_SIZE :: 0x876
GL_BUFFER_UPDATE_BARRIER_BIT :: 0x0000020
GL_BUFFER_USAGE :: 0x876
GL_BUFFER_VARIABLE :: 0x92E
GL_BYTE :: 0x140
GL_CCW :: 0x090
GL_CLAMP_TO_EDGE :: 0x812
GL_COLOR :: 0x180
GL_COLOR_ATTACHMENT0 :: 0x8CE
GL_COLOR_ATTACHMENT1 :: 0x8CE
GL_COLOR_ATTACHMENT10 :: 0x8CE
GL_COLOR_ATTACHMENT11 :: 0x8CE
GL_COLOR_ATTACHMENT12 :: 0x8CE
GL_COLOR_ATTACHMENT13 :: 0x8CE
GL_COLOR_ATTACHMENT14 :: 0x8CE
GL_COLOR_ATTACHMENT15 :: 0x8CE
GL_COLOR_ATTACHMENT16 :: 0x8CF
GL_COLOR_ATTACHMENT17 :: 0x8CF
GL_COLOR_ATTACHMENT18 :: 0x8CF
GL_COLOR_ATTACHMENT19 :: 0x8CF
GL_COLOR_ATTACHMENT2 :: 0x8CE
GL_COLOR_ATTACHMENT20 :: 0x8CF
GL_COLOR_ATTACHMENT21 :: 0x8CF
GL_COLOR_ATTACHMENT22 :: 0x8CF
GL_COLOR_ATTACHMENT23 :: 0x8CF
GL_COLOR_ATTACHMENT24 :: 0x8CF
GL_COLOR_ATTACHMENT25 :: 0x8CF
GL_COLOR_ATTACHMENT26 :: 0x8CF
GL_COLOR_ATTACHMENT27 :: 0x8CF
GL_COLOR_ATTACHMENT28 :: 0x8CF
GL_COLOR_ATTACHMENT29 :: 0x8CF
GL_COLOR_ATTACHMENT3 :: 0x8CE
GL_COLOR_ATTACHMENT30 :: 0x8CF
GL_COLOR_ATTACHMENT31 :: 0x8CF
GL_COLOR_ATTACHMENT4 :: 0x8CE
GL_COLOR_ATTACHMENT5 :: 0x8CE
GL_COLOR_ATTACHMENT6 :: 0x8CE
GL_COLOR_ATTACHMENT7 :: 0x8CE
GL_COLOR_ATTACHMENT8 :: 0x8CE
GL_COLOR_ATTACHMENT9 :: 0x8CE
GL_COLOR_BUFFER_BIT :: 0x0000400
GL_COLOR_CLEAR_VALUE :: 0x0C2
GL_COLOR_WRITEMASK :: 0x0C2
GL_COMMAND_BARRIER_BIT :: 0x0000004
GL_COMPARE_REF_TO_TEXTURE :: 0x884
GL_COMPARE_R_TO_TEXTURE :: 0x884
GL_COMPILE_STATUS :: 0x8B8
GL_COMPRESSED_R11_EAC :: 0x927
GL_COMPRESSED_RG11_EAC :: 0x927
GL_COMPRESSED_RGB8_ETC2 :: 0x927
GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 :: 0x927
GL_COMPRESSED_RGBA8_ETC2_EAC :: 0x927
GL_COMPRESSED_SIGNED_R11_EAC :: 0x927
GL_COMPRESSED_SIGNED_RG11_EAC :: 0x927
GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC :: 0x927
GL_COMPRESSED_SRGB8_ETC2 :: 0x927
GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 :: 0x927
GL_COMPRESSED_TEXTURE_FORMATS :: 0x86A
GL_COMPUTE_SHADER :: 0x91B
GL_COMPUTE_SHADER_BIT :: 0x0000002
GL_COMPUTE_WORK_GROUP_SIZE :: 0x826
GL_CONDITION_SATISFIED :: 0x911
GL_CONSTANT_ALPHA :: 0x800
GL_CONSTANT_COLOR :: 0x800
GL_COPY_READ_BUFFER :: 0x8F3
GL_COPY_READ_BUFFER_BINDING :: 0x8F3
GL_COPY_WRITE_BUFFER :: 0x8F3
GL_COPY_WRITE_BUFFER_BINDING :: 0x8F3
GL_CULL_FACE :: 0x0B4
GL_CULL_FACE_MODE :: 0x0B4
GL_CURRENT_PROGRAM :: 0x8B8
GL_CURRENT_QUERY :: 0x886
GL_CURRENT_VERTEX_ATTRIB :: 0x862
GL_CW :: 0x090
GL_DECR :: 0x1E0
GL_DECR_WRAP :: 0x850
GL_DELETE_STATUS :: 0x8B8
GL_DEPTH :: 0x180
GL_DEPTH24_STENCIL8 :: 0x88F
GL_DEPTH32F_STENCIL8 :: 0x8CA
GL_DEPTH_ATTACHMENT :: 0x8D0
GL_DEPTH_BITS :: 0x0D5
GL_DEPTH_BUFFER_BIT :: 0x0000010
GL_DEPTH_CLEAR_VALUE :: 0x0B7
GL_DEPTH_COMPONENT :: 0x190
GL_DEPTH_COMPONENT16 :: 0x81A
GL_DEPTH_COMPONENT24 :: 0x81A
GL_DEPTH_COMPONENT32F :: 0x8CA
GL_DEPTH_FUNC :: 0x0B7
GL_DEPTH_RANGE :: 0x0B7
GL_DEPTH_STENCIL :: 0x84F
GL_DEPTH_STENCIL_ATTACHMENT :: 0x821
GL_DEPTH_STENCIL_TEXTURE_MODE :: 0x90E
GL_DEPTH_TEST :: 0x0B7
GL_DEPTH_WRITEMASK :: 0x0B7
GL_DISPATCH_INDIRECT_BUFFER :: 0x90E
GL_DISPATCH_INDIRECT_BUFFER_BINDING :: 0x90E
GL_DITHER :: 0x0BD
GL_DONT_CARE :: 0x110
GL_DRAW_BUFFER0 :: 0x882
GL_DRAW_BUFFER1 :: 0x882
GL_DRAW_BUFFER10 :: 0x882
GL_DRAW_BUFFER11 :: 0x883
GL_DRAW_BUFFER12 :: 0x883
GL_DRAW_BUFFER13 :: 0x883
GL_DRAW_BUFFER14 :: 0x883
GL_DRAW_BUFFER15 :: 0x883
GL_DRAW_BUFFER2 :: 0x882
GL_DRAW_BUFFER3 :: 0x882
GL_DRAW_BUFFER4 :: 0x882
GL_DRAW_BUFFER5 :: 0x882
GL_DRAW_BUFFER6 :: 0x882
GL_DRAW_BUFFER7 :: 0x882
GL_DRAW_BUFFER8 :: 0x882
GL_DRAW_BUFFER9 :: 0x882
GL_DRAW_FRAMEBUFFER :: 0x8CA
GL_DRAW_FRAMEBUFFER_BINDING :: 0x8CA
GL_DRAW_INDIRECT_BUFFER :: 0x8F3
GL_DRAW_INDIRECT_BUFFER_BINDING :: 0x8F4
GL_DST_ALPHA :: 0x030
GL_DST_COLOR :: 0x030
GL_DYNAMIC_COPY :: 0x88E
GL_DYNAMIC_DRAW :: 0x88E
GL_DYNAMIC_READ :: 0x88E
GL_ELEMENT_ARRAY_BARRIER_BIT :: 0x0000000
GL_ELEMENT_ARRAY_BUFFER :: 0x889
GL_ELEMENT_ARRAY_BUFFER_BINDING :: 0x889
GL_EQUAL :: 0x020
GL_EXTENSIONS :: 0x1F0
GL_FALSE :: 0
GL_FASTEST :: 0x110
GL_FIXED :: 0x140
GL_FLOAT :: 0x140
GL_FLOAT_32_UNSIGNED_INT_24_8_REV :: 0x8DA
GL_FLOAT_MAT2 :: 0x8B5
GL_FLOAT_MAT2x3 :: 0x8B6
GL_FLOAT_MAT2x4 :: 0x8B6
GL_FLOAT_MAT3 :: 0x8B5
GL_FLOAT_MAT3x2 :: 0x8B6
GL_FLOAT_MAT3x4 :: 0x8B6
GL_FLOAT_MAT4 :: 0x8B5
GL_FLOAT_MAT4x2 :: 0x8B6
GL_FLOAT_MAT4x3 :: 0x8B6
GL_FLOAT_VEC2 :: 0x8B5
GL_FLOAT_VEC3 :: 0x8B5
GL_FLOAT_VEC4 :: 0x8B5
GL_FRAGMENT_SHADER :: 0x8B3
GL_FRAGMENT_SHADER_BIT :: 0x0000000
GL_FRAGMENT_SHADER_DERIVATIVE_HINT :: 0x8B8
GL_FRAMEBUFFER :: 0x8D4
GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE :: 0x821
GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE :: 0x821
GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING :: 0x821
GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE :: 0x821
GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE :: 0x821
GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE :: 0x821
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME :: 0x8CD
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE :: 0x8CD
GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE :: 0x821
GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE :: 0x821
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE :: 0x8CD
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER :: 0x8CD
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL :: 0x8CD
GL_FRAMEBUFFER_BARRIER_BIT :: 0x0000040
GL_FRAMEBUFFER_BINDING :: 0x8CA
GL_FRAMEBUFFER_COMPLETE :: 0x8CD
GL_FRAMEBUFFER_DEFAULT :: 0x821
GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS :: 0x931
GL_FRAMEBUFFER_DEFAULT_HEIGHT :: 0x931
GL_FRAMEBUFFER_DEFAULT_SAMPLES :: 0x931
GL_FRAMEBUFFER_DEFAULT_WIDTH :: 0x931
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT :: 0x8CD
GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS :: 0x8CD
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT :: 0x8CD
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE :: 0x8D5
GL_FRAMEBUFFER_UNDEFINED :: 0x821
GL_FRAMEBUFFER_UNSUPPORTED :: 0x8CD
GL_FRONT :: 0x040
GL_FRONT_AND_BACK :: 0x040
GL_FRONT_FACE :: 0x0B4
GL_FUNC_ADD :: 0x800
GL_FUNC_REVERSE_SUBTRACT :: 0x800
GL_FUNC_SUBTRACT :: 0x800
GL_GENERATE_MIPMAP_HINT :: 0x819
GL_GEQUAL :: 0x020
GL_GREATER :: 0x020
GL_GREEN :: 0x190
GL_GREEN_BITS :: 0x0D5
GL_HALF_FLOAT :: 0x140
GL_HIGH_FLOAT :: 0x8DF
GL_HIGH_INT :: 0x8DF
GL_IMAGE_2D :: 0x904
GL_IMAGE_2D_ARRAY :: 0x905
GL_IMAGE_3D :: 0x904
GL_IMAGE_BINDING_ACCESS :: 0x8F3
GL_IMAGE_BINDING_FORMAT :: 0x906
GL_IMAGE_BINDING_LAYER :: 0x8F3
GL_IMAGE_BINDING_LAYERED :: 0x8F3
GL_IMAGE_BINDING_LEVEL :: 0x8F3
GL_IMAGE_BINDING_NAME :: 0x8F3
GL_IMAGE_CUBE :: 0x905
GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS :: 0x90C
GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE :: 0x90C
GL_IMAGE_FORMAT_COMPATIBILITY_TYPE :: 0x90C
GL_IMPLEMENTATION_COLOR_READ_FORMAT :: 0x8B9
GL_IMPLEMENTATION_COLOR_READ_TYPE :: 0x8B9
GL_INCR :: 0x1E0
GL_INCR_WRAP :: 0x850
GL_INFO_LOG_LENGTH :: 0x8B8
GL_INT :: 0x140
GL_INTERLEAVED_ATTRIBS :: 0x8C8
GL_INT_2_10_10_10_REV :: 0x8D9
GL_INT_IMAGE_2D :: 0x905
GL_INT_IMAGE_2D_ARRAY :: 0x905
GL_INT_IMAGE_3D :: 0x905
GL_INT_IMAGE_CUBE :: 0x905
GL_INT_SAMPLER_2D :: 0x8DC
GL_INT_SAMPLER_2D_ARRAY :: 0x8DC
GL_INT_SAMPLER_2D_MULTISAMPLE :: 0x910
GL_INT_SAMPLER_3D :: 0x8DC
GL_INT_SAMPLER_CUBE :: 0x8DC
GL_INT_VEC2 :: 0x8B5
GL_INT_VEC3 :: 0x8B5
GL_INT_VEC4 :: 0x8B5
GL_INVALID_ENUM :: 0x050
GL_INVALID_FRAMEBUFFER_OPERATION :: 0x050
GL_INVALID_INDEX :: 0xFFFFFFF
GL_INVALID_OPERATION :: 0x050
GL_INVALID_VALUE :: 0x050
GL_INVERT :: 0x150
GL_IS_ROW_MAJOR :: 0x930
GL_KEEP :: 0x1E0
GL_LEQUAL :: 0x020
GL_LESS :: 0x020
GL_LINEAR :: 0x260
GL_LINEAR_MIPMAP_LINEAR :: 0x270
GL_LINEAR_MIPMAP_NEAREST :: 0x270
GL_LINES :: 0x000
GL_LINE_LOOP :: 0x000
GL_LINE_STRIP :: 0x000
GL_LINE_WIDTH :: 0x0B2
GL_LINK_STATUS :: 0x8B8
GL_LOCATION :: 0x930
GL_LOW_FLOAT :: 0x8DF
GL_LOW_INT :: 0x8DF
GL_LUMINANCE :: 0x190
GL_LUMINANCE_ALPHA :: 0x190
GL_MAJOR_VERSION :: 0x821
GL_MAP_FLUSH_EXPLICIT_BIT :: 0x001
GL_MAP_INVALIDATE_BUFFER_BIT :: 0x000
GL_MAP_INVALIDATE_RANGE_BIT :: 0x000
GL_MAP_READ_BIT :: 0x000
GL_MAP_UNSYNCHRONIZED_BIT :: 0x002
GL_MAP_WRITE_BIT :: 0x000
GL_MATRIX_STRIDE :: 0x92F
GL_MAX :: 0x800
GL_MAX_3D_TEXTURE_SIZE :: 0x807
GL_MAX_ARRAY_TEXTURE_LAYERS :: 0x88F
GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS :: 0x92D
GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE :: 0x92D
GL_MAX_COLOR_ATTACHMENTS :: 0x8CD
GL_MAX_COLOR_TEXTURE_SAMPLES :: 0x910
GL_MAX_COMBINED_ATOMIC_COUNTERS :: 0x92D
GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS :: 0x92D
GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS :: 0x826
GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS :: 0x8A3
GL_MAX_COMBINED_IMAGE_UNIFORMS :: 0x90C
GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS :: 0x8F3
GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES :: 0x8F3
GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS :: 0x90D
GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS :: 0x8B4
GL_MAX_COMBINED_UNIFORM_BLOCKS :: 0x8A2
GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS :: 0x8A3
GL_MAX_COMPUTE_ATOMIC_COUNTERS :: 0x826
GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS :: 0x826
GL_MAX_COMPUTE_IMAGE_UNIFORMS :: 0x91B
GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS :: 0x90D
GL_MAX_COMPUTE_SHARED_MEMORY_SIZE :: 0x826
GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS :: 0x91B
GL_MAX_COMPUTE_UNIFORM_BLOCKS :: 0x91B
GL_MAX_COMPUTE_UNIFORM_COMPONENTS :: 0x826
GL_MAX_COMPUTE_WORK_GROUP_COUNT :: 0x91B
GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS :: 0x90E
GL_MAX_COMPUTE_WORK_GROUP_SIZE :: 0x91B
GL_MAX_CUBE_MAP_TEXTURE_SIZE :: 0x851
GL_MAX_DEPTH_TEXTURE_SAMPLES :: 0x910
GL_MAX_DRAW_BUFFERS :: 0x882
GL_MAX_ELEMENTS_INDICES :: 0x80E
GL_MAX_ELEMENTS_VERTICES :: 0x80E
GL_MAX_ELEMENT_INDEX :: 0x8D6
GL_MAX_FRAGMENT_ATOMIC_COUNTERS :: 0x92D
GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS :: 0x92D
GL_MAX_FRAGMENT_IMAGE_UNIFORMS :: 0x90C
GL_MAX_FRAGMENT_INPUT_COMPONENTS :: 0x912
GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS :: 0x90D
GL_MAX_FRAGMENT_UNIFORM_BLOCKS :: 0x8A2
GL_MAX_FRAGMENT_UNIFORM_COMPONENTS :: 0x8B4
GL_MAX_FRAGMENT_UNIFORM_VECTORS :: 0x8DF
GL_MAX_FRAMEBUFFER_HEIGHT :: 0x931
GL_MAX_FRAMEBUFFER_SAMPLES :: 0x931
GL_MAX_FRAMEBUFFER_WIDTH :: 0x931
GL_MAX_IMAGE_UNITS :: 0x8F3
GL_MAX_INTEGER_SAMPLES :: 0x911
GL_MAX_NAME_LENGTH :: 0x92F
GL_MAX_NUM_ACTIVE_VARIABLES :: 0x92F
GL_MAX_PROGRAM_TEXEL_OFFSET :: 0x890
GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET :: 0x8E5
GL_MAX_RENDERBUFFER_SIZE :: 0x84E
GL_MAX_SAMPLES :: 0x8D5
GL_MAX_SAMPLE_MASK_WORDS :: 0x8E5
GL_MAX_SERVER_WAIT_TIMEOUT :: 0x911
GL_MAX_SHADER_STORAGE_BLOCK_SIZE :: 0x90D
GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS :: 0x90D
GL_MAX_TEXTURE_IMAGE_UNITS :: 0x887
GL_MAX_TEXTURE_LOD_BIAS :: 0x84F
GL_MAX_TEXTURE_SIZE :: 0x0D3
GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS :: 0x8C8
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS :: 0x8C8
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS :: 0x8C8
GL_MAX_UNIFORM_BLOCK_SIZE :: 0x8A3
GL_MAX_UNIFORM_BUFFER_BINDINGS :: 0x8A2
GL_MAX_UNIFORM_LOCATIONS :: 0x826
GL_MAX_VARYING_COMPONENTS :: 0x8B4
GL_MAX_VARYING_FLOATS :: 0x8B4
GL_MAX_VARYING_VECTORS :: 0x8DF
GL_MAX_VERTEX_ATOMIC_COUNTERS :: 0x92D
GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS :: 0x92C
GL_MAX_VERTEX_ATTRIBS :: 0x886
GL_MAX_VERTEX_ATTRIB_BINDINGS :: 0x82D
GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET :: 0x82D
GL_MAX_VERTEX_ATTRIB_STRIDE :: 0x82E
GL_MAX_VERTEX_IMAGE_UNIFORMS :: 0x90C
GL_MAX_VERTEX_OUTPUT_COMPONENTS :: 0x912
GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS :: 0x90D
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS :: 0x8B4
GL_MAX_VERTEX_UNIFORM_BLOCKS :: 0x8A2
GL_MAX_VERTEX_UNIFORM_COMPONENTS :: 0x8B4
GL_MAX_VERTEX_UNIFORM_VECTORS :: 0x8DF
GL_MAX_VIEWPORT_DIMS :: 0x0D3
GL_MEDIUM_FLOAT :: 0x8DF
GL_MEDIUM_INT :: 0x8DF
GL_MIN :: 0x800
GL_MINOR_VERSION :: 0x821
GL_MIN_PROGRAM_TEXEL_OFFSET :: 0x890
GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET :: 0x8E5
GL_MIRRORED_REPEAT :: 0x837
GL_NAME_LENGTH :: 0x92F
GL_NEAREST :: 0x260
GL_NEAREST_MIPMAP_LINEAR :: 0x270
GL_NEAREST_MIPMAP_NEAREST :: 0x270
GL_NEVER :: 0x020
GL_NICEST :: 0x110
GL_NONE :: 0
GL_NOTEQUAL :: 0x020
GL_NO_ERROR :: 0
GL_NUM_ACTIVE_VARIABLES :: 0x930
GL_NUM_COMPRESSED_TEXTURE_FORMATS :: 0x86A
GL_NUM_EXTENSIONS :: 0x821
GL_NUM_PROGRAM_BINARY_FORMATS :: 0x87F
GL_NUM_SAMPLE_COUNTS :: 0x938
GL_NUM_SHADER_BINARY_FORMATS :: 0x8DF
GL_OBJECT_TYPE :: 0x911
GL_OFFSET :: 0x92F
GL_ONE :: 1
GL_ONE_MINUS_CONSTANT_ALPHA :: 0x800
GL_ONE_MINUS_CONSTANT_COLOR :: 0x800
GL_ONE_MINUS_DST_ALPHA :: 0x030
GL_ONE_MINUS_DST_COLOR :: 0x030
GL_ONE_MINUS_SRC_ALPHA :: 0x030
GL_ONE_MINUS_SRC_COLOR :: 0x030
GL_OUT_OF_MEMORY :: 0x050
GL_PACK_ALIGNMENT :: 0x0D0
GL_PACK_ROW_LENGTH :: 0x0D0
GL_PACK_SKIP_PIXELS :: 0x0D0
GL_PACK_SKIP_ROWS :: 0x0D0
GL_PIXEL_BUFFER_BARRIER_BIT :: 0x0000008
GL_PIXEL_PACK_BUFFER :: 0x88E
GL_PIXEL_PACK_BUFFER_BINDING :: 0x88E
GL_PIXEL_UNPACK_BUFFER :: 0x88E
GL_PIXEL_UNPACK_BUFFER_BINDING :: 0x88E
GL_POINTS :: 0x000
GL_POLYGON_OFFSET_FACTOR :: 0x803
GL_POLYGON_OFFSET_FILL :: 0x803
GL_POLYGON_OFFSET_UNITS :: 0x2A0
GL_PRIMITIVE_RESTART_FIXED_INDEX :: 0x8D6
GL_PROGRAM_BINARY_FORMATS :: 0x87F
GL_PROGRAM_BINARY_LENGTH :: 0x874
GL_PROGRAM_BINARY_RETRIEVABLE_HINT :: 0x825
GL_PROGRAM_INPUT :: 0x92E
GL_PROGRAM_OUTPUT :: 0x92E
GL_PROGRAM_PIPELINE_BINDING :: 0x825
GL_PROGRAM_SEPARABLE :: 0x825
GL_QUERY_RESULT :: 0x886
GL_QUERY_RESULT_AVAILABLE :: 0x886
GL_R11F_G11F_B10F :: 0x8C3
GL_R16F :: 0x822
GL_R16I :: 0x823
GL_R16UI :: 0x823
GL_R32F :: 0x822
GL_R32I :: 0x823
GL_R32UI :: 0x823
GL_R8 :: 0x822
GL_R8I :: 0x823
GL_R8UI :: 0x823
GL_R8_SNORM :: 0x8F9
GL_RASTERIZER_DISCARD :: 0x8C8
GL_READ_BUFFER :: 0x0C0
GL_READ_FRAMEBUFFER :: 0x8CA
GL_READ_FRAMEBUFFER_BINDING :: 0x8CA
GL_READ_ONLY :: 0x88B
GL_READ_WRITE :: 0x88B
GL_RED :: 0x190
GL_RED_BITS :: 0x0D5
GL_RED_INTEGER :: 0x8D9
GL_REFERENCED_BY_COMPUTE_SHADER :: 0x930
GL_REFERENCED_BY_FRAGMENT_SHADER :: 0x930
GL_REFERENCED_BY_VERTEX_SHADER :: 0x930
GL_RENDERBUFFER :: 0x8D4
GL_RENDERBUFFER_ALPHA_SIZE :: 0x8D5
GL_RENDERBUFFER_BINDING :: 0x8CA
GL_RENDERBUFFER_BLUE_SIZE :: 0x8D5
GL_RENDERBUFFER_DEPTH_SIZE :: 0x8D5
GL_RENDERBUFFER_GREEN_SIZE :: 0x8D5
GL_RENDERBUFFER_HEIGHT :: 0x8D4
GL_RENDERBUFFER_INTERNAL_FORMAT :: 0x8D4
GL_RENDERBUFFER_RED_SIZE :: 0x8D5
GL_RENDERBUFFER_SAMPLES :: 0x8CA
GL_RENDERBUFFER_STENCIL_SIZE :: 0x8D5
GL_RENDERBUFFER_WIDTH :: 0x8D4
GL_RENDERER :: 0x1F0
GL_REPEAT :: 0x290
GL_REPLACE :: 0x1E0
GL_RG :: 0x822
GL_RG16F :: 0x822
GL_RG16I :: 0x823
GL_RG16UI :: 0x823
GL_RG32F :: 0x823
GL_RG32I :: 0x823
GL_RG32UI :: 0x823
GL_RG8 :: 0x822
GL_RG8I :: 0x823
GL_RG8UI :: 0x823
GL_RG8_SNORM :: 0x8F9
GL_RGB :: 0x190
GL_RGB10_A2 :: 0x805
GL_RGB10_A2UI :: 0x906
GL_RGB16F :: 0x881
GL_RGB16I :: 0x8D8
GL_RGB16UI :: 0x8D7
GL_RGB32F :: 0x881
GL_RGB32I :: 0x8D8
GL_RGB32UI :: 0x8D7
GL_RGB565 :: 0x8D6
GL_RGB5_A1 :: 0x805
GL_RGB8 :: 0x805
GL_RGB8I :: 0x8D8
GL_RGB8UI :: 0x8D7
GL_RGB8_SNORM :: 0x8F9
GL_RGB9_E5 :: 0x8C3
GL_RGBA :: 0x190
GL_RGBA16F :: 0x881
GL_RGBA16I :: 0x8D8
GL_RGBA16UI :: 0x8D7
GL_RGBA32F :: 0x881
GL_RGBA32I :: 0x8D8
GL_RGBA32UI :: 0x8D7
GL_RGBA4 :: 0x805
GL_RGBA8 :: 0x805
GL_RGBA8I :: 0x8D8
GL_RGBA8UI :: 0x8D7
GL_RGBA8_SNORM :: 0x8F9
GL_RGBA_INTEGER :: 0x8D9
GL_RGB_INTEGER :: 0x8D9
GL_RG_INTEGER :: 0x822
GL_SAMPLER_2D :: 0x8B5
GL_SAMPLER_2D_ARRAY :: 0x8DC
GL_SAMPLER_2D_ARRAY_SHADOW :: 0x8DC
GL_SAMPLER_2D_MULTISAMPLE :: 0x910
GL_SAMPLER_2D_SHADOW :: 0x8B6
GL_SAMPLER_3D :: 0x8B5
GL_SAMPLER_BINDING :: 0x891
GL_SAMPLER_CUBE :: 0x8B6
GL_SAMPLER_CUBE_SHADOW :: 0x8DC
GL_SAMPLES :: 0x80A
GL_SAMPLE_ALPHA_TO_COVERAGE :: 0x809
GL_SAMPLE_BUFFERS :: 0x80A
GL_SAMPLE_COVERAGE :: 0x80A
GL_SAMPLE_COVERAGE_INVERT :: 0x80A
GL_SAMPLE_COVERAGE_VALUE :: 0x80A
GL_SAMPLE_MASK :: 0x8E5
GL_SAMPLE_MASK_VALUE :: 0x8E5
GL_SAMPLE_POSITION :: 0x8E5
GL_SCISSOR_BOX :: 0x0C1
GL_SCISSOR_TEST :: 0x0C1
GL_SEPARATE_ATTRIBS :: 0x8C8
GL_SHADER_BINARY_FORMATS :: 0x8DF
GL_SHADER_COMPILER :: 0x8DF
GL_SHADER_IMAGE_ACCESS_BARRIER_BIT :: 0x0000002
GL_SHADER_SOURCE_LENGTH :: 0x8B8
GL_SHADER_STORAGE_BARRIER_BIT :: 0x0000200
GL_SHADER_STORAGE_BLOCK :: 0x92E
GL_SHADER_STORAGE_BUFFER :: 0x90D
GL_SHADER_STORAGE_BUFFER_BINDING :: 0x90D
GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT :: 0x90D
GL_SHADER_STORAGE_BUFFER_SIZE :: 0x90D
GL_SHADER_STORAGE_BUFFER_START :: 0x90D
GL_SHADER_TYPE :: 0x8B4
GL_SHADING_LANGUAGE_VERSION :: 0x8B8
GL_SHORT :: 0x140
GL_SIGNALED :: 0x911
GL_SIGNED_NORMALIZED :: 0x8F9
GL_SRC_ALPHA :: 0x030
GL_SRC_ALPHA_SATURATE :: 0x030
GL_SRC_COLOR :: 0x030
GL_SRGB :: 0x8C4
GL_SRGB8 :: 0x8C4
GL_SRGB8_ALPHA8 :: 0x8C4
GL_STATIC_COPY :: 0x88E
GL_STATIC_DRAW :: 0x88E
GL_STATIC_READ :: 0x88E
GL_STENCIL :: 0x180
GL_STENCIL_ATTACHMENT :: 0x8D2
GL_STENCIL_BACK_FAIL :: 0x880
GL_STENCIL_BACK_FUNC :: 0x880
GL_STENCIL_BACK_PASS_DEPTH_FAIL :: 0x880
GL_STENCIL_BACK_PASS_DEPTH_PASS :: 0x880
GL_STENCIL_BACK_REF :: 0x8CA
GL_STENCIL_BACK_VALUE_MASK :: 0x8CA
GL_STENCIL_BACK_WRITEMASK :: 0x8CA
GL_STENCIL_BITS :: 0x0D5
GL_STENCIL_BUFFER_BIT :: 0x0000040
GL_STENCIL_CLEAR_VALUE :: 0x0B9
GL_STENCIL_FAIL :: 0x0B9
GL_STENCIL_FUNC :: 0x0B9
GL_STENCIL_INDEX :: 0x190
GL_STENCIL_INDEX8 :: 0x8D4
GL_STENCIL_PASS_DEPTH_FAIL :: 0x0B9
GL_STENCIL_PASS_DEPTH_PASS :: 0x0B9
GL_STENCIL_REF :: 0x0B9
GL_STENCIL_TEST :: 0x0B9
GL_STENCIL_VALUE_MASK :: 0x0B9
GL_STENCIL_WRITEMASK :: 0x0B9
GL_STREAM_COPY :: 0x88E
GL_STREAM_DRAW :: 0x88E
GL_STREAM_READ :: 0x88E
GL_SUBPIXEL_BITS :: 0x0D5
GL_SYNC_CONDITION :: 0x911
GL_SYNC_FENCE :: 0x911
GL_SYNC_FLAGS :: 0x911
GL_SYNC_FLUSH_COMMANDS_BIT :: 0x0000000
GL_SYNC_GPU_COMMANDS_COMPLETE :: 0x911
GL_SYNC_STATUS :: 0x911
GL_TEXTURE :: 0x170
GL_TEXTURE0 :: 0x84C
GL_TEXTURE1 :: 0x84C
GL_TEXTURE10 :: 0x84C
GL_TEXTURE11 :: 0x84C
GL_TEXTURE12 :: 0x84C
GL_TEXTURE13 :: 0x84C
GL_TEXTURE14 :: 0x84C
GL_TEXTURE15 :: 0x84C
GL_TEXTURE16 :: 0x84D
GL_TEXTURE17 :: 0x84D
GL_TEXTURE18 :: 0x84D
GL_TEXTURE19 :: 0x84D
GL_TEXTURE2 :: 0x84C
GL_TEXTURE20 :: 0x84D
GL_TEXTURE21 :: 0x84D
GL_TEXTURE22 :: 0x84D
GL_TEXTURE23 :: 0x84D
GL_TEXTURE24 :: 0x84D
GL_TEXTURE25 :: 0x84D
GL_TEXTURE26 :: 0x84D
GL_TEXTURE27 :: 0x84D
GL_TEXTURE28 :: 0x84D
GL_TEXTURE29 :: 0x84D
GL_TEXTURE3 :: 0x84C
GL_TEXTURE30 :: 0x84D
GL_TEXTURE31 :: 0x84D
GL_TEXTURE4 :: 0x84C
GL_TEXTURE5 :: 0x84C
GL_TEXTURE6 :: 0x84C
GL_TEXTURE7 :: 0x84C
GL_TEXTURE8 :: 0x84C
GL_TEXTURE9 :: 0x84C
GL_TEXTURE_2D :: 0x0DE
GL_TEXTURE_2D_ARRAY :: 0x8C1
GL_TEXTURE_2D_MULTISAMPLE :: 0x910
GL_TEXTURE_3D :: 0x806
GL_TEXTURE_ALPHA_SIZE :: 0x805
GL_TEXTURE_ALPHA_TYPE :: 0x8C1
GL_TEXTURE_BASE_LEVEL :: 0x813
GL_TEXTURE_BINDING_2D :: 0x806
GL_TEXTURE_BINDING_2D_ARRAY :: 0x8C1
GL_TEXTURE_BINDING_2D_MULTISAMPLE :: 0x910
GL_TEXTURE_BINDING_3D :: 0x806
GL_TEXTURE_BINDING_CUBE_MAP :: 0x851
GL_TEXTURE_BLUE_SIZE :: 0x805
GL_TEXTURE_BLUE_TYPE :: 0x8C1
GL_TEXTURE_COMPARE_FUNC :: 0x884
GL_TEXTURE_COMPARE_MODE :: 0x884
GL_TEXTURE_COMPRESSED :: 0x86A
GL_TEXTURE_CUBE_MAP :: 0x851
GL_TEXTURE_CUBE_MAP_NEGATIVE_X :: 0x851
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y :: 0x851
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z :: 0x851
GL_TEXTURE_CUBE_MAP_POSITIVE_X :: 0x851
GL_TEXTURE_CUBE_MAP_POSITIVE_Y :: 0x851
GL_TEXTURE_CUBE_MAP_POSITIVE_Z :: 0x851
GL_TEXTURE_DEPTH :: 0x807
GL_TEXTURE_DEPTH_SIZE :: 0x884
GL_TEXTURE_DEPTH_TYPE :: 0x8C1
GL_TEXTURE_FETCH_BARRIER_BIT :: 0x0000000
GL_TEXTURE_FIXED_SAMPLE_LOCATIONS :: 0x910
GL_TEXTURE_GREEN_SIZE :: 0x805
GL_TEXTURE_GREEN_TYPE :: 0x8C1
GL_TEXTURE_HEIGHT :: 0x100
GL_TEXTURE_IMMUTABLE_FORMAT :: 0x912
GL_TEXTURE_IMMUTABLE_LEVELS :: 0x82D
GL_TEXTURE_INTERNAL_FORMAT :: 0x100
GL_TEXTURE_MAG_FILTER :: 0x280
GL_TEXTURE_MAX_LEVEL :: 0x813
GL_TEXTURE_MAX_LOD :: 0x813
GL_TEXTURE_MIN_FILTER :: 0x280
GL_TEXTURE_MIN_LOD :: 0x813
GL_TEXTURE_RED_SIZE :: 0x805
GL_TEXTURE_RED_TYPE :: 0x8C1
GL_TEXTURE_SAMPLES :: 0x910
GL_TEXTURE_SHARED_SIZE :: 0x8C3
GL_TEXTURE_STENCIL_SIZE :: 0x88F
GL_TEXTURE_SWIZZLE_A :: 0x8E4
GL_TEXTURE_SWIZZLE_B :: 0x8E4
GL_TEXTURE_SWIZZLE_G :: 0x8E4
GL_TEXTURE_SWIZZLE_R :: 0x8E4
GL_TEXTURE_UPDATE_BARRIER_BIT :: 0x0000010
GL_TEXTURE_WIDTH :: 0x100
GL_TEXTURE_WRAP_R :: 0x807
GL_TEXTURE_WRAP_S :: 0x280
GL_TEXTURE_WRAP_T :: 0x280
GL_TIMEOUT_EXPIRED :: 0x911
GL_TIMEOUT_IGNORED :: 0xFFFFFFFFFFFFFFF
GL_TOP_LEVEL_ARRAY_SIZE :: 0x930
GL_TOP_LEVEL_ARRAY_STRIDE :: 0x930
GL_TRANSFORM_FEEDBACK :: 0x8E2
GL_TRANSFORM_FEEDBACK_ACTIVE :: 0x8E2
GL_TRANSFORM_FEEDBACK_BARRIER_BIT :: 0x0000080
GL_TRANSFORM_FEEDBACK_BINDING :: 0x8E2
GL_TRANSFORM_FEEDBACK_BUFFER :: 0x8C8
GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE :: 0x8E2
GL_TRANSFORM_FEEDBACK_BUFFER_BINDING :: 0x8C8
GL_TRANSFORM_FEEDBACK_BUFFER_MODE :: 0x8C7
GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED :: 0x8E2
GL_TRANSFORM_FEEDBACK_BUFFER_SIZE :: 0x8C8
GL_TRANSFORM_FEEDBACK_BUFFER_START :: 0x8C8
GL_TRANSFORM_FEEDBACK_PAUSED :: 0x8E2
GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN :: 0x8C8
GL_TRANSFORM_FEEDBACK_VARYING :: 0x92F
GL_TRANSFORM_FEEDBACK_VARYINGS :: 0x8C8
GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH :: 0x8C7
GL_TRIANGLES :: 0x000
GL_TRIANGLE_FAN :: 0x000
GL_TRIANGLE_STRIP :: 0x000
GL_TRUE :: 1
GL_TYPE :: 0x92F
GL_UNIFORM :: 0x92E
GL_UNIFORM_ARRAY_STRIDE :: 0x8A3
GL_UNIFORM_BARRIER_BIT :: 0x0000000
GL_UNIFORM_BLOCK :: 0x92E
GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS :: 0x8A4
GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES :: 0x8A4
GL_UNIFORM_BLOCK_BINDING :: 0x8A3
GL_UNIFORM_BLOCK_DATA_SIZE :: 0x8A4
GL_UNIFORM_BLOCK_INDEX :: 0x8A3
GL_UNIFORM_BLOCK_NAME_LENGTH :: 0x8A4
GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER :: 0x8A4
GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER :: 0x8A4
GL_UNIFORM_BUFFER :: 0x8A1
GL_UNIFORM_BUFFER_BINDING :: 0x8A2
GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT :: 0x8A3
GL_UNIFORM_BUFFER_SIZE :: 0x8A2
GL_UNIFORM_BUFFER_START :: 0x8A2
GL_UNIFORM_IS_ROW_MAJOR :: 0x8A3
GL_UNIFORM_MATRIX_STRIDE :: 0x8A3
GL_UNIFORM_NAME_LENGTH :: 0x8A3
GL_UNIFORM_OFFSET :: 0x8A3
GL_UNIFORM_SIZE :: 0x8A3
GL_UNIFORM_TYPE :: 0x8A3
GL_UNPACK_ALIGNMENT :: 0x0CF
GL_UNPACK_IMAGE_HEIGHT :: 0x806
GL_UNPACK_ROW_LENGTH :: 0x0CF
GL_UNPACK_SKIP_IMAGES :: 0x806
GL_UNPACK_SKIP_PIXELS :: 0x0CF
GL_UNPACK_SKIP_ROWS :: 0x0CF
GL_UNSIGNALED :: 0x911
GL_UNSIGNED_BYTE :: 0x140
GL_UNSIGNED_INT :: 0x140
GL_UNSIGNED_INT_10F_11F_11F_REV :: 0x8C3
GL_UNSIGNED_INT_24_8 :: 0x84F
GL_UNSIGNED_INT_2_10_10_10_REV :: 0x836
GL_UNSIGNED_INT_5_9_9_9_REV :: 0x8C3
GL_UNSIGNED_INT_ATOMIC_COUNTER :: 0x92D
GL_UNSIGNED_INT_IMAGE_2D :: 0x906
GL_UNSIGNED_INT_IMAGE_2D_ARRAY :: 0x906
GL_UNSIGNED_INT_IMAGE_3D :: 0x906
GL_UNSIGNED_INT_IMAGE_CUBE :: 0x906
GL_UNSIGNED_INT_SAMPLER_2D :: 0x8DD
GL_UNSIGNED_INT_SAMPLER_2D_ARRAY :: 0x8DD
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE :: 0x910
GL_UNSIGNED_INT_SAMPLER_3D :: 0x8DD
GL_UNSIGNED_INT_SAMPLER_CUBE :: 0x8DD
GL_UNSIGNED_INT_VEC2 :: 0x8DC
GL_UNSIGNED_INT_VEC3 :: 0x8DC
GL_UNSIGNED_INT_VEC4 :: 0x8DC
GL_UNSIGNED_NORMALIZED :: 0x8C1
GL_UNSIGNED_SHORT :: 0x140
GL_UNSIGNED_SHORT_4_4_4_4 :: 0x803
GL_UNSIGNED_SHORT_5_5_5_1 :: 0x803
GL_UNSIGNED_SHORT_5_6_5 :: 0x836
GL_VALIDATE_STATUS :: 0x8B8
GL_VENDOR :: 0x1F0
GL_VERSION :: 0x1F0
GL_VERTEX_ARRAY_BINDING :: 0x85B
GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT :: 0x0000000
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING :: 0x889
GL_VERTEX_ATTRIB_ARRAY_DIVISOR :: 0x88F
GL_VERTEX_ATTRIB_ARRAY_ENABLED :: 0x862
GL_VERTEX_ATTRIB_ARRAY_INTEGER :: 0x88F
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED :: 0x886
GL_VERTEX_ATTRIB_ARRAY_POINTER :: 0x864
GL_VERTEX_ATTRIB_ARRAY_SIZE :: 0x862
GL_VERTEX_ATTRIB_ARRAY_STRIDE :: 0x862
GL_VERTEX_ATTRIB_ARRAY_TYPE :: 0x862
GL_VERTEX_ATTRIB_BINDING :: 0x82D
GL_VERTEX_ATTRIB_RELATIVE_OFFSET :: 0x82D
GL_VERTEX_BINDING_BUFFER :: 0x8F4
GL_VERTEX_BINDING_DIVISOR :: 0x82D
GL_VERTEX_BINDING_OFFSET :: 0x82D
GL_VERTEX_BINDING_STRIDE :: 0x82D
GL_VERTEX_SHADER :: 0x8B3
GL_VERTEX_SHADER_BIT :: 0x0000000
GL_VIEWPORT :: 0x0BA
GL_WAIT_FAILED :: 0x911
GL_WRITE_ONLY :: 0x88B
GL_ZERO :: 0
