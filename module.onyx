package opengles

use core { package, cptr }
use runtime

#if #defined(runtime.Generated_Foreign_Info) {
    foreign_block :: __foreign_block
} else {
    #library "onyx_opengles"
}

GLGetProcAddress :: #distinct i64 // (name: cstr) -> ^void

#local __foreign_block :: #foreign "onyx_opengles" {
    // glInit MUST be called before any other GL calls, as it initializes all GL function pointers
    // using the load_function provided. Currently, the only supported library that provides this
    // is glfwGetLoadProcAddress.
    glInit :: (load_function: GLGetProcAddress) -> void ---

    glActiveTexture :: (texture: GLenum) -> void ---
    glAttachShader :: (program: GLuint, shader: GLuint) -> void ---
    glBindAttribLocation :: (program: GLuint, index: GLuint, name: ^GLchar) -> void ---
    glBindBuffer :: (target: GLenum, buffer: GLint) -> void ---
    glBindFramebuffer :: (target: GLenum, framebuffer: GLint) -> void ---
    glBindRenderbuffer :: (target: GLenum, renderbuffer: GLint) -> void ---
    glBindTexture :: (target: GLenum, texture: GLint) -> void ---
    glBlendColor :: (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> void ---
    glBlendEquation :: (mode: GLenum) -> void ---
    glBlendEquationSeparate :: (modeRGB: GLenum, modeAlpha: GLenum) -> void ---
    glBlendFunc :: (sfactor: GLenum, dfactor: GLenum) -> void ---
    glBlendFuncSeparate :: (sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) -> void ---
    glBufferData :: (target: GLenum, size: GLsizeiptr, data: rawptr, usage: GLenum) -> void ---
    glBufferSubData :: (target: GLenum, offset: GLintptr, size: GLsizeiptr, data: rawptr) -> void ---
    glCheckFramebufferStatus :: (target: GLenum) -> GLenum ---
    glClear :: (mask: GLbitfield) -> void ---
    glClearColor :: (red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) -> void ---
    glClearDepthf :: (d: GLfloat) -> void ---
    glClearStencil :: (s: GLint) -> void ---
    glColorMask :: (red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) -> void ---
    glCompileShader :: (shader: GLuint) -> void ---
    glCompressedTexImage2D :: (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: rawptr) -> void ---
    glCompressedTexSubImage2D :: (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: rawptr) -> void ---
    glCopyTexImage2D :: (target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) -> void ---
    glCopyTexSubImage2D :: (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void ---
    glCreateProgram :: () -> GLuint ---
    glCreateShader :: (type: GLenum) -> GLuint ---
    glCullFace :: (mode: GLenum) -> void ---
    glDeleteBuffers :: (n: GLsizei, buffers: ^GLuint) -> void ---
    glDeleteFramebuffers :: (n: GLsizei, framebuffers: ^GLuint) -> void ---
    glDeleteProgram :: (program: GLuint) -> void ---
    glDeleteRenderbuffers :: (n: GLsizei, renderbuffers: ^GLuint) -> void ---
    glDeleteShader :: (shader: GLuint) -> void ---
    glDeleteTextures :: (n: GLsizei, textures: ^GLuint) -> void ---
    glDepthFunc :: (func: GLenum) -> void ---
    glDepthMask :: (flag: GLboolean) -> void ---
    glDepthRangef :: (n: GLfloat, f: GLfloat) -> void ---
    glDetachShader :: (program: GLuint, shader: GLuint) -> void ---
    glDisable :: (cap: GLenum) -> void ---
    glDisableVertexAttribArray :: (index: GLuint) -> void ---
    glDrawArrays :: (mode: GLenum, first: GLint, count: GLsizei) -> void ---
    glDrawElements :: (mode: GLenum, count: GLsizei, type: GLenum, indices: rawptr) -> void ---
    glEnable :: (cap: GLenum) -> void ---
    glEnableVertexAttribArray :: (index: GLuint) -> void ---
    glFinish :: () -> void ---
    glFlush :: () -> void ---
    glFramebufferRenderbuffer :: (target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) -> void ---
    glFramebufferTexture2D :: (target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) -> void ---
    glFrontFace :: (mode: GLenum) -> void ---
    glGenBuffers :: (n: GLsizei, buffers: ^GLuint) -> void ---
    glGenerateMipmap :: (target: GLenum) -> void ---
    glGenFramebuffers :: (n: GLsizei, framebuffers: ^GLuint) -> void ---
    glGenRenderbuffers :: (n: GLsizei, renderbuffers: ^GLuint) -> void ---
    glGenTextures :: (n: GLsizei, textures: ^GLuint) -> void ---
    glGetActiveAttrib :: (program: GLuint, index: GLuint, bufSize: GLsizei, length: ^GLsizei, size: ^GLint, type: ^GLenum, name: ^GLchar) -> void ---
    glGetActiveUniform :: (program: GLuint, index: GLuint, bufSize: GLsizei, length: ^GLsizei, size: ^GLint, type: ^GLenum, name: ^GLchar) -> void ---
    glGetAttachedShaders :: (program: GLuint, maxCount: GLsizei, count: ^GLsizei, shaders: ^GLuint) -> void ---
    glGetAttribLocation :: (program: GLuint, name: ^GLchar) -> GLint ---
    glGetBooleanv :: (pname: GLenum, data: ^GLboolean) -> void ---
    glGetBufferParameteriv :: (target: GLenum, pname: GLenum, params: ^GLint) -> void ---
    glGetError :: () -> GLenum ---
    glGetFloatv :: (pname: GLenum, data: ^GLfloat) -> void ---
    glGetFramebufferAttachmentParameteriv :: (target: GLenum, attachment: GLenum, pname: GLenum, params: ^GLint) -> void ---
    glGetIntegerv :: (pname: GLenum, data: ^GLint) -> void ---
    glGetProgramiv :: (program: GLuint, pname: GLenum, params: ^GLint) -> void ---
    glGetProgramInfoLog :: (program: GLuint, bufSize: GLsizei, length: ^GLsizei, infoLog: ^GLchar) -> void ---
    glGetRenderbufferParameteriv :: (target: GLenum, pname: GLenum, params: ^GLint) -> void ---
    glGetShaderiv :: (shader: GLuint, pname: GLenum, params: ^GLint) -> void ---
    glGetShaderInfoLog :: (shader: GLuint, bufSize: GLsizei, length: ^GLsizei, infoLog: ^GLchar) -> void ---
    glGetShaderPrecisionFormat :: (shadertype: GLenum, precisiontype: GLenum, range: ^GLint, precision: ^GLint) -> void ---
    glGetShaderSource :: (shader: GLuint, bufSize: GLsizei, length: ^GLsizei, source: ^GLchar) -> void ---
    glGetString :: (name: GLenum) -> cptr(GLubyte) ---
    glGetTexParameterfv :: (target: GLenum, pname: GLenum, params: ^GLfloat) -> void ---
    glGetTexParameteriv :: (target: GLenum, pname: GLenum, params: ^GLint) -> void ---
    glGetUniformfv :: (program: GLuint, location: GLint, params: ^GLfloat) -> void ---
    glGetUniformiv :: (program: GLuint, location: GLint, params: ^GLint) -> void ---
    glGetUniformLocation :: (program: GLuint, name: ^GLchar) -> GLint ---
    glGetVertexAttribfv :: (index: GLuint, pname: GLenum, params: ^GLfloat) -> void ---
    glGetVertexAttribiv :: (index: GLuint, pname: GLenum, params: ^GLint) -> void ---
    glGetVertexAttribPointerv :: (index: GLuint, pname: GLenum, pointer: ^u32) -> void ---
    glHint :: (target: GLenum, mode: GLenum) -> void ---
    glIsBuffer :: (buffer: GLuint) -> GLboolean ---
    glIsEnabled :: (cap: GLenum) -> GLboolean ---
    glIsFramebuffer :: (framebuffer: GLuint) -> GLboolean ---
    glIsProgram :: (program: GLuint) -> GLboolean ---
    glIsRenderbuffer :: (renderbuffer: GLuint) -> GLboolean ---
    glIsShader :: (shader: GLuint) -> GLboolean ---
    glIsTexture :: (texture: GLuint) -> GLboolean ---
    glLineWidth :: (width: GLfloat) -> void ---
    glLinkProgram :: (program: GLuint) -> void ---
    glPixelStorei :: (pname: GLenum, param: GLint) -> void ---
    glPolygonOffset :: (factor: GLfloat, units: GLfloat) -> void ---
    glReadPixels :: (x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: rawptr) -> void ---
    glReleaseShaderCompiler :: () -> void ---
    glRenderbufferStorage :: (target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void ---
    glSampleCoverage :: (value: GLfloat, invert: GLboolean) -> void ---
    glScissor :: (x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void ---
    glShaderBinary :: (count: GLsizei, shaders: ^GLuint, binaryformat: GLenum, binary: rawptr, length: GLsizei) -> void ---
    glShaderSource :: (shader: GLuint, count: GLsizei, string: ^cptr(GLchar), length: ^GLint) -> void ---
    glStencilFunc :: (func: GLenum, ref: GLint, mask: GLuint) -> void ---
    glStencilFuncSeparate :: (face: GLenum, func: GLenum, ref: GLint, mask: GLuint) -> void ---
    glStencilMask :: (mask: GLuint) -> void ---
    glStencilMaskSeparate :: (face: GLenum, mask: GLuint) -> void ---
    glStencilOp :: (fail: GLenum, zfail: GLenum, zpass: GLenum) -> void ---
    glStencilOpSeparate :: (face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) -> void ---
    glTexImage2D :: (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: rawptr) -> void ---
    glTexParameterf :: (target: GLenum, pname: GLenum, param: GLfloat) -> void ---
    glTexParameterfv :: (target: GLenum, pname: GLenum, params: ^GLfloat) -> void ---
    glTexParameteri :: (target: GLenum, pname: GLenum, param: GLint) -> void ---
    glTexParameteriv :: (target: GLenum, pname: GLenum, params: ^GLint) -> void ---
    glTexSubImage2D :: (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: rawptr) -> void ---
    glUniform1f :: (location: GLint, v0: GLfloat) -> void ---
    glUniform1fv :: (location: GLint, count: GLsizei, value: ^GLfloat) -> void ---
    glUniform1i :: (location: GLint, v0: GLint) -> void ---
    glUniform1iv :: (location: GLint, count: GLsizei, value: ^GLint) -> void ---
    glUniform2f :: (location: GLint, v0: GLfloat, v1: GLfloat) -> void ---
    glUniform2fv :: (location: GLint, count: GLsizei, value: ^GLfloat) -> void ---
    glUniform2i :: (location: GLint, v0: GLint, v1: GLint) -> void ---
    glUniform2iv :: (location: GLint, count: GLsizei, value: ^GLint) -> void ---
    glUniform3f :: (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) -> void ---
    glUniform3fv :: (location: GLint, count: GLsizei, value: ^GLfloat) -> void ---
    glUniform3i :: (location: GLint, v0: GLint, v1: GLint, v2: GLint) -> void ---
    glUniform3iv :: (location: GLint, count: GLsizei, value: ^GLint) -> void ---
    glUniform4f :: (location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) -> void ---
    glUniform4fv :: (location: GLint, count: GLsizei, value: ^GLfloat) -> void ---
    glUniform4i :: (location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) -> void ---
    glUniform4iv :: (location: GLint, count: GLsizei, value: ^GLint) -> void ---
    glUniformMatrix2fv :: (location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glUniformMatrix3fv :: (location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glUniformMatrix4fv :: (location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glUseProgram :: (program: GLuint) -> void ---
    glValidateProgram :: (program: GLuint) -> void ---
    glVertexAttrib1f :: (index: GLuint, x: GLfloat) -> void ---
    glVertexAttrib1fv :: (index: GLuint, v: ^GLfloat) -> void ---
    glVertexAttrib2f :: (index: GLuint, x: GLfloat, y: GLfloat) -> void ---
    glVertexAttrib2fv :: (index: GLuint, v: ^GLfloat) -> void ---
    glVertexAttrib3f :: (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) -> void ---
    glVertexAttrib3fv :: (index: GLuint, v: ^GLfloat) -> void ---
    glVertexAttrib4f :: (index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) -> void ---
    glVertexAttrib4fv :: (index: GLuint, v: ^GLfloat) -> void ---
    glVertexAttribPointer :: (index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, pointer: u32) -> void --- // The final parameter is not a pointer, as that does not follow with the FFI.
    glViewport :: (x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void ---


    // OpenGL ES 3.0
    glReadBuffer :: (src: GLenum) -> void ---
    glDrawRangeElements :: (mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, indices: rawptr) -> void ---
    glTexImage3D :: (target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: rawptr) -> void ---
    glTexSubImage3D :: (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pixels: rawptr) -> void ---
    glCopyTexSubImage3D :: (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void ---
    glCompressedTexImage3D :: (target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: rawptr) -> void ---
    glCompressedTexSubImage3D :: (target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: rawptr) -> void ---
    glGenQueries :: (n: GLsizei, ids: ^GLuint) -> void ---
    glDeleteQueries :: (n: GLsizei, ids: ^GLuint) -> void ---
    glIsQuery :: (id: GLuint) -> GLboolean ---
    glBeginQuery :: (target: GLenum, id: GLuint) -> void ---
    glEndQuery :: (target: GLenum) -> void ---
    glGetQueryiv :: (target: GLenum, pname: GLenum, params: ^GLint) -> void ---
    glGetQueryObjectuiv :: (id: GLuint, pname: GLenum, params: ^GLuint) -> void ---
    glUnmapBuffer :: (target: GLenum) -> GLboolean ---
    glGetBufferPointerv :: (target: GLenum, pname: GLenum, params: ^rawptr) -> void ---
    glDrawBuffers :: (n: GLsizei, bufs: ^GLenum) -> void ---
    glUniformMatrix2x3fv :: (location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glUniformMatrix3x2fv :: (location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glUniformMatrix2x4fv :: (location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glUniformMatrix4x2fv :: (location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glUniformMatrix3x4fv :: (location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glUniformMatrix4x3fv :: (location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glBlitFramebuffer :: (srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum) -> void ---
    glRenderbufferStorageMultisample :: (target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void ---
    glFramebufferTextureLayer :: (target: GLenum, attachment: GLenum, texture: GLuint, level: GLint, layer: GLint) -> void ---
    glMapBufferRange :: (target: GLenum, offset: GLintptr, length: GLsizeiptr, access: GLbitfield) -> cptr(u8) ---
    glFlushMappedBufferRange :: (target: GLenum, offset: GLintptr, length: GLsizeiptr) -> void ---
    glBindVertexArray :: (array: GLint) -> void ---
    glDeleteVertexArrays :: (n: GLsizei, arrays: ^GLuint) -> void ---
    glGenVertexArrays :: (n: GLsizei, arrays: ^GLuint) -> void ---
    glIsVertexArray :: (array: GLuint) -> GLboolean ---
    glGetIntegeri_v :: (target: GLenum, index: GLuint, data: ^GLint) -> void ---
    glBeginTransformFeedback :: (primitiveMode: GLenum) -> void ---
    glEndTransformFeedback :: () -> void ---
    glBindBufferRange :: (target: GLenum, index: GLuint, buffer: GLuint, offset: GLintptr, size: GLsizeiptr) -> void ---
    glBindBufferBase :: (target: GLenum, index: GLuint, buffer: GLuint) -> void ---
    glTransformFeedbackVaryings :: (program: GLuint, count: GLsizei, varyings: ^^GLchar, bufferMode: GLenum) -> void ---
    glGetTransformFeedbackVarying :: (program: GLuint, index: GLuint, bufSize: GLsizei, length: ^GLsizei, size: ^GLsizei, type: ^GLenum, name: ^GLchar) -> void ---
    glVertexAttribIPointer :: (index: GLuint, size: GLint, type: GLenum, stride: GLsizei, pointer: u32) -> void ---
    glGetVertexAttribIiv :: (index: GLuint, pname: GLenum, params: ^GLint) -> void ---
    glGetVertexAttribIuiv :: (index: GLuint, pname: GLenum, params: ^GLuint) -> void ---
    glVertexAttribI4i :: (index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint) -> void ---
    glVertexAttribI4ui :: (index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint) -> void ---
    glVertexAttribI4iv :: (index: GLuint, v: ^GLint) -> void ---
    glVertexAttribI4uiv :: (index: GLuint, v: ^GLuint) -> void ---
    glGetUniformuiv :: (program: GLuint, location: GLint, params: ^GLuint) -> void ---
    glGetFragDataLocation :: (program: GLuint, name: ^GLchar) -> GLint ---
    glUniform1ui :: (location: GLint, v0: GLuint) -> void ---
    glUniform2ui :: (location: GLint, v0: GLuint, v1: GLuint) -> void ---
    glUniform3ui :: (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint) -> void ---
    glUniform4ui :: (location: GLint, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint) -> void ---
    glUniform1uiv :: (location: GLint, count: GLsizei, value: ^GLuint) -> void ---
    glUniform2uiv :: (location: GLint, count: GLsizei, value: ^GLuint) -> void ---
    glUniform3uiv :: (location: GLint, count: GLsizei, value: ^GLuint) -> void ---
    glUniform4uiv :: (location: GLint, count: GLsizei, value: ^GLuint) -> void ---
    glClearBufferiv :: (buffer: GLenum, drawbuffer: GLint, value: ^GLint) -> void ---
    glClearBufferuiv :: (buffer: GLenum, drawbuffer: GLint, value: ^GLuint) -> void ---
    glClearBufferfv :: (buffer: GLenum, drawbuffer: GLint, value: ^GLfloat) -> void ---
    glClearBufferfi :: (buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint) -> void ---
    glGetStringi :: (name: GLenum, index: GLuint) -> cptr(GLubyte) ---
    glCopyBufferSubData :: (readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr) -> void ---
    glGetUniformIndices :: (program: GLuint, uniformCount: GLsizei, uniformNames: ^cptr(GLchar), uniformIndices: ^GLuint) -> void ---
    glGetActiveUniformsiv :: (program: GLuint, uniformCount: GLsizei, uniformIndices: ^GLuint, pname: GLenum, params: ^GLint) -> void ---
    glGetUniformBlockIndex :: (program: GLuint, uniformBlockName: ^GLchar) -> GLuint ---
    glGetActiveUniformBlockiv :: (program: GLuint, uniformBlockIndex: GLuint, pname: GLenum, params: ^GLint) -> void ---
    glGetActiveUniformBlockName :: (program: GLuint, uniformBlockIndex: GLuint, bufSize: GLsizei, length: ^GLsizei, uniformBlockName: ^GLchar) -> void ---
    glUniformBlockBinding :: (program: GLuint, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint) -> void ---
    glDrawArraysInstanced :: (mode: GLenum, first: GLint, count: GLsizei, instancecount: GLsizei) -> void ---
    glDrawElementsInstanced :: (mode: GLenum, count: GLsizei, type: GLenum, indices: rawptr, instancecount: GLsizei) -> void ---
    // glFenceSync :: (condition: GLenum, flags: GLbitfield) -> GLsync ---
    // glIsSync :: (sync: GLsync) -> GLboolean ---
    // glDeleteSync :: (sync: GLsync) -> void ---
    // glClientWaitSync :: (sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> GLenum ---
    // glWaitSync :: (sync: GLsync, flags: GLbitfield, timeout: GLuint64) -> void ---
    glGetInteger64v :: (pname: GLenum, data: ^GLint64) -> void ---
    // glGetSynciv :: (sync: GLsync, pname: GLenum, bufSize: GLsizei, length: ^GLsizei, values: ^GLint) -> void ---
    glGetInteger64i_v :: (target: GLenum, index: GLuint, data: ^GLint64) -> void ---
    glGetBufferParameteri64v :: (target: GLenum, pname: GLenum, params: ^GLint64) -> void ---
    glGenSamplers :: (count: GLsizei, samplers: ^GLuint) -> void ---
    glDeleteSamplers :: (count: GLsizei, samplers: ^GLuint) -> void ---
    glIsSampler :: (sampler: GLuint) -> GLboolean ---
    glBindSampler :: (unit: GLuint, sampler: GLuint) -> void ---
    glSamplerParameteri :: (sampler: GLuint, pname: GLenum, param: GLint) -> void ---
    glSamplerParameteriv :: (sampler: GLuint, pname: GLenum, param: ^GLint) -> void ---
    glSamplerParameterf :: (sampler: GLuint, pname: GLenum, param: GLfloat) -> void ---
    glSamplerParameterfv :: (sampler: GLuint, pname: GLenum, param: ^GLfloat) -> void ---
    glGetSamplerParameteriv :: (sampler: GLuint, pname: GLenum, params: ^GLint) -> void ---
    glGetSamplerParameterfv :: (sampler: GLuint, pname: GLenum, params: ^GLfloat) -> void ---
    glVertexAttribDivisor :: (index: GLuint, divisor: GLuint) -> void ---
    glBindTransformFeedback :: (target: GLenum, id: GLuint) -> void ---
    glDeleteTransformFeedbacks :: (n: GLsizei, ids: ^GLuint) -> void ---
    glGenTransformFeedbacks :: (n: GLsizei, ids: ^GLuint) -> void ---
    glIsTransformFeedback :: (id: GLuint) -> GLboolean ---
    glPauseTransformFeedback :: () -> void ---
    glResumeTransformFeedback :: () -> void ---
    glGetProgramBinary :: (program: GLuint, bufSize: GLsizei, length: ^GLsizei, binaryFormat: ^GLenum, binary: rawptr) -> void ---
    glProgramBinary :: (program: GLuint, binaryFormat: GLenum, binary: rawptr, length: GLsizei) -> void ---
    glProgramParameteri :: (program: GLuint, pname: GLenum, value: GLint) -> void ---
    glInvalidateFramebuffer :: (target: GLenum, numAttachments: GLsizei, attachments: ^GLenum) -> void ---
    glInvalidateSubFramebuffer :: (target: GLenum, numAttachments: GLsizei, attachments: ^GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) -> void ---
    glTexStorage2D :: (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei) -> void ---
    glTexStorage3D :: (target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei) -> void ---
    glGetInternalformativ :: (target: GLenum, internalformat: GLenum, pname: GLenum, bufSize: GLsizei, params: ^GLint) -> void ---

    // OpenGL ES 3.1
    glActiveShaderProgram :: (pipeline: GLuint, program: GLuint) -> void ---
    glBindImageTexture :: (unit, texture: GLuint, level: GLint, layered: GLboolean, layer: GLint, access: GLenum, format: GLenum) -> void ---
    glBindProgramPipeline :: (pipeline: GLuint) -> void ---
    glBindVertexBuffer :: (bindingindex, buffer: GLuint, offset: GLintptr, stride: GLsizei) -> void ---
    glCreateShaderProgramv :: (type: GLenum, count: GLsizei, strings: ^cptr(GLchar)) -> void ---
    glDeleteProgramPipelines :: (n: GLsizei, framebuffers: ^GLuint) -> void ---
    glDispatchCompute :: (num_groups_x, num_groups_y, num_groups_z: GLuint) -> void ---
    glDispatchComputeIndirect :: (indirect: ^i32) -> void ---
    glDrawArraysIndirect :: (mode: GLenum, indirect: rawptr) -> void ---
    glDrawElementsIndirect :: (mode, type: GLenum, indirect: rawptr) -> void ---
    glFramebufferParameteri :: (target, pname: GLenum, param: GLint) -> void ---
    glGenProgramPipelines :: (n: GLsizei, pipelines: ^GLuint) -> void ---
    glGetBooleani_v :: (target: GLenum, index: GLuint, data: ^GLboolean) -> void ---
    glGetFramebufferParameteriv :: (target, pname: GLenum, params: ^GLint) -> void ---
    glGetMultisamplefv :: (pname: GLenum, index: GLuint, val: ^GLfloat) -> void ---
    glGetProgramInterfaceiv :: (program: GLuint, programInterface, pname: GLenum, params: ^GLint) -> void ---
    glGetProgramPipelineInfoLog :: (pipeline: GLuint, bufSize: GLsizei, length: ^GLsizei, infoLog: ^GLchar) -> void ---
    glGetProgramPipelineiv :: (pipeline: GLuint, pname: GLenum, params: ^GLint) -> void ---
    glGetProgramResourceIndex :: (program: GLuint, programInterface: GLenum, name: ^GLchar) -> GLuint ---
    glGetProgramResourceLocation :: (program: GLuint, programInterface: GLenum, name: ^GLchar) -> GLint ---
    glGetProgramResourceName :: (program: GLuint, programInterface: GLenum, index: GLuint, bufSize: GLsizei, length: ^GLsizei, name: ^GLchar) -> void ---
    glGetProgramResourceiv :: (program: GLuint, programInterface: GLenum, index: GLuint, propCount: GLsizei, props: ^GLenum, count: GLsizei, length: ^GLsizei, params: ^GLint) -> void ---
    glGetTexLevelParameterfv :: (target: GLenum, level: GLint, pname: GLenum, params: ^GLfloat) -> void ---
    glGetTexLevelParameteriv :: (target: GLenum, level: GLint, pname: GLenum, params: ^GLint) -> void ---
    glIsProgramPipeline :: (pipeline: GLuint) -> GLboolean ---
    glMemoryBarrier :: (barries: GLbitfield) -> void ---
    glMemoryBarrierByRegion :: (barries: GLbitfield) -> void ---
    glProgramUniform1f  :: (program: GLuint, location: GLint, v0: GLfloat) -> void ---
    glProgramUniform1i  :: (program: GLuint, location: GLint, v0: GLint) -> void ---
    glProgramUniform1ui :: (program: GLuint, location: GLint, v0: GLuint) -> void ---
    glProgramUniform2f  :: (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat) -> void ---
    glProgramUniform2i  :: (program: GLuint, location: GLint, v0: GLint, v1: GLint) -> void ---
    glProgramUniform2ui :: (program: GLuint, location: GLint, v0: GLuint, v1: GLuint) -> void ---
    glProgramUniform3f  :: (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v3: GLfloat) -> void ---
    glProgramUniform3i  :: (program: GLuint, location: GLint, v0: GLint, v1: GLint, v3: GLint) -> void ---
    glProgramUniform3ui :: (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v3: GLuint) -> void ---
    glProgramUniform4f  :: (program: GLuint, location: GLint, v0: GLfloat, v1: GLfloat, v3: GLfloat, v4: GLfloat) -> void ---
    glProgramUniform4i  :: (program: GLuint, location: GLint, v0: GLint, v1: GLint, v3: GLint, v4: GLint) -> void ---
    glProgramUniform4ui :: (program: GLuint, location: GLint, v0: GLuint, v1: GLuint, v3: GLuint, v4: GLuint) -> void ---
    glProgramUniform1fv  :: (program: GLuint, location: GLint, count: GLsizei, value: ^GLfloat) -> void ---
    glProgramUniform1iv  :: (program: GLuint, location: GLint, count: GLsizei, value: ^GLint) -> void ---
    glProgramUniform1uiv :: (program: GLuint, location: GLint, count: GLsizei, value: ^GLuint) -> void ---
    glProgramUniform2fv  :: (program: GLuint, location: GLint, count: GLsizei, value: ^GLfloat) -> void ---
    glProgramUniform2iv  :: (program: GLuint, location: GLint, count: GLsizei, value: ^GLint) -> void ---
    glProgramUniform2uiv :: (program: GLuint, location: GLint, count: GLsizei, value: ^GLuint) -> void ---
    glProgramUniform3fv  :: (program: GLuint, location: GLint, count: GLsizei, value: ^GLfloat) -> void ---
    glProgramUniform3iv  :: (program: GLuint, location: GLint, count: GLsizei, value: ^GLint) -> void ---
    glProgramUniform3uiv :: (program: GLuint, location: GLint, count: GLsizei, value: ^GLuint) -> void ---
    glProgramUniform4fv  :: (program: GLuint, location: GLint, count: GLsizei, value: ^GLfloat) -> void ---
    glProgramUniform4iv  :: (program: GLuint, location: GLint, count: GLsizei, value: ^GLint) -> void ---
    glProgramUniform4uiv :: (program: GLuint, location: GLint, count: GLsizei, value: ^GLuint) -> void ---
    glProgramUniformMatrix2fv   :: (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glProgramUniformMatrix2x3fv :: (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glProgramUniformMatrix2x4fv :: (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glProgramUniformMatrix3fv   :: (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glProgramUniformMatrix3x2fv :: (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glProgramUniformMatrix3x4fv :: (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glProgramUniformMatrix4fv   :: (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glProgramUniformMatrix4x2fv :: (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glProgramUniformMatrix4x3fv :: (program: GLuint, location: GLint, count: GLsizei, transpose: GLboolean, value: ^GLfloat) -> void ---
    glSampleMaski :: (maskNumber: GLuint, mask: GLbitfield) -> void ---
    glTexStorage2DMultisample :: (target: GLenum, samples: GLsizei, internalFormat: GLenum, width, height: GLsizei, fixedsamplelocations: GLboolean) -> void ---
    glUseProgramStages :: (pipeline: GLuint, stages: GLbitfield, program: GLuint) -> void ---
    glValidateProgramPipeline :: (pipeline: GLuint) -> void ---
    glVertexAttribBinding :: (attribindex: GLuint, bindingindex: GLuint) -> void ---
    glVertexAttribFormat :: (attribindex: GLuint, size: GLint, type: GLenum, normalized: GLboolean, relativeoffset: GLuint) -> void ---
    glVertexAttribIFormat :: (attribindex: GLuint, size: GLint, type: GLenum, relativeoffset: GLuint) -> void ---
    glVertexBindingDivisor :: (bindingindex: GLuint, divisor: GLuint) -> void ---
}

GLbyte :: i8;
GLclampf :: f32;
GLfixed :: i32;
GLshort :: i16;
GLushort :: u16;
GLvoid :: void;
GLsync :: #distinct u64;
GLint64 :: i64;
GLuint64 :: u64;
GLenum :: i32;
GLuint :: u32;
GLchar :: u8;
GLfloat :: f32;
GLsizeiptr :: i32;
GLintptr:: i32;
GLbitfield :: u32;
GLint :: i32;
GLboolean :: bool;
GLsizei :: i32;
GLubyte :: u8;

GL_ACTIVE_ATOMIC_COUNTER_BUFFERS :: 0x92D9
GL_ACTIVE_ATTRIBUTES :: 0x8B89
GL_ACTIVE_ATTRIBUTE_MAX_LENGTH :: 0x8B8A
GL_ACTIVE_PROGRAM :: 0x8259
GL_ACTIVE_RESOURCES :: 0x92F5
GL_ACTIVE_TEXTURE :: 0x84E0
GL_ACTIVE_UNIFORMS :: 0x8B86
GL_ACTIVE_UNIFORM_BLOCKS :: 0x8A36
GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH :: 0x8A35
GL_ACTIVE_UNIFORM_MAX_LENGTH :: 0x8B87
GL_ACTIVE_VARIABLES :: 0x9305
GL_ALIASED_LINE_WIDTH_RANGE :: 0x846E
GL_ALIASED_POINT_SIZE_RANGE :: 0x846D
GL_ALL_BARRIER_BITS :: 0xFFFFFFFF
GL_ALL_SHADER_BITS :: 0xFFFFFFFF
GL_ALPHA :: 0x1906
GL_ALPHA_BITS :: 0x0D55
GL_ALREADY_SIGNALED :: 0x911A
GL_ALWAYS :: 0x0207
GL_ANY_SAMPLES_PASSED :: 0x8C2F
GL_ANY_SAMPLES_PASSED_CONSERVATIVE :: 0x8D6A
GL_ARRAY_BUFFER :: 0x8892
GL_ARRAY_BUFFER_BINDING :: 0x8894
GL_ARRAY_SIZE :: 0x92FB
GL_ARRAY_STRIDE :: 0x92FE
GL_ATOMIC_COUNTER_BARRIER_BIT :: 0x00001000
GL_ATOMIC_COUNTER_BUFFER :: 0x92C0
GL_ATOMIC_COUNTER_BUFFER_BINDING :: 0x92C1
GL_ATOMIC_COUNTER_BUFFER_INDEX :: 0x9301
GL_ATOMIC_COUNTER_BUFFER_SIZE :: 0x92C3
GL_ATOMIC_COUNTER_BUFFER_START :: 0x92C2
GL_ATTACHED_SHADERS :: 0x8B85
GL_BACK :: 0x0405
GL_BLEND :: 0x0BE2
GL_BLEND_COLOR :: 0x8005
GL_BLEND_DST_ALPHA :: 0x80CA
GL_BLEND_DST_RGB :: 0x80C8
GL_BLEND_EQUATION :: 0x8009
GL_BLEND_EQUATION_ALPHA :: 0x883D
GL_BLEND_EQUATION_RGB :: 0x8009
GL_BLEND_SRC_ALPHA :: 0x80CB
GL_BLEND_SRC_RGB :: 0x80C9
GL_BLOCK_INDEX :: 0x92FD
GL_BLUE :: 0x1905
GL_BLUE_BITS :: 0x0D54
GL_BOOL :: 0x8B56
GL_BOOL_VEC2 :: 0x8B57
GL_BOOL_VEC3 :: 0x8B58
GL_BOOL_VEC4 :: 0x8B59
GL_BUFFER_ACCESS_FLAGS :: 0x911F
GL_BUFFER_BINDING :: 0x9302
GL_BUFFER_DATA_SIZE :: 0x9303
GL_BUFFER_MAPPED :: 0x88BC
GL_BUFFER_MAP_LENGTH :: 0x9120
GL_BUFFER_MAP_OFFSET :: 0x9121
GL_BUFFER_MAP_POINTER :: 0x88BD
GL_BUFFER_SIZE :: 0x8764
GL_BUFFER_UPDATE_BARRIER_BIT :: 0x00000200
GL_BUFFER_USAGE :: 0x8765
GL_BUFFER_VARIABLE :: 0x92E5
GL_BYTE :: 0x1400
GL_CCW :: 0x0901
GL_CLAMP_TO_EDGE :: 0x812F
GL_COLOR :: 0x1800
GL_COLOR_ATTACHMENT0 :: 0x8CE0
GL_COLOR_ATTACHMENT1 :: 0x8CE1
GL_COLOR_ATTACHMENT10 :: 0x8CEA
GL_COLOR_ATTACHMENT11 :: 0x8CEB
GL_COLOR_ATTACHMENT12 :: 0x8CEC
GL_COLOR_ATTACHMENT13 :: 0x8CED
GL_COLOR_ATTACHMENT14 :: 0x8CEE
GL_COLOR_ATTACHMENT15 :: 0x8CEF
GL_COLOR_ATTACHMENT16 :: 0x8CF0
GL_COLOR_ATTACHMENT17 :: 0x8CF1
GL_COLOR_ATTACHMENT18 :: 0x8CF2
GL_COLOR_ATTACHMENT19 :: 0x8CF3
GL_COLOR_ATTACHMENT2 :: 0x8CE2
GL_COLOR_ATTACHMENT20 :: 0x8CF4
GL_COLOR_ATTACHMENT21 :: 0x8CF5
GL_COLOR_ATTACHMENT22 :: 0x8CF6
GL_COLOR_ATTACHMENT23 :: 0x8CF7
GL_COLOR_ATTACHMENT24 :: 0x8CF8
GL_COLOR_ATTACHMENT25 :: 0x8CF9
GL_COLOR_ATTACHMENT26 :: 0x8CFA
GL_COLOR_ATTACHMENT27 :: 0x8CFB
GL_COLOR_ATTACHMENT28 :: 0x8CFC
GL_COLOR_ATTACHMENT29 :: 0x8CFD
GL_COLOR_ATTACHMENT3 :: 0x8CE3
GL_COLOR_ATTACHMENT30 :: 0x8CFE
GL_COLOR_ATTACHMENT31 :: 0x8CFF
GL_COLOR_ATTACHMENT4 :: 0x8CE4
GL_COLOR_ATTACHMENT5 :: 0x8CE5
GL_COLOR_ATTACHMENT6 :: 0x8CE6
GL_COLOR_ATTACHMENT7 :: 0x8CE7
GL_COLOR_ATTACHMENT8 :: 0x8CE8
GL_COLOR_ATTACHMENT9 :: 0x8CE9
GL_COLOR_BUFFER_BIT :: 0x00004000
GL_COLOR_CLEAR_VALUE :: 0x0C22
GL_COLOR_WRITEMASK :: 0x0C23
GL_COMMAND_BARRIER_BIT :: 0x00000040
GL_COMPARE_REF_TO_TEXTURE :: 0x884E
GL_COMPARE_R_TO_TEXTURE :: 0x884E
GL_COMPILE_STATUS :: 0x8B81
GL_COMPRESSED_R11_EAC :: 0x9270
GL_COMPRESSED_RG11_EAC :: 0x9272
GL_COMPRESSED_RGB8_ETC2 :: 0x9274
GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 :: 0x9276
GL_COMPRESSED_RGBA8_ETC2_EAC :: 0x9278
GL_COMPRESSED_SIGNED_R11_EAC :: 0x9271
GL_COMPRESSED_SIGNED_RG11_EAC :: 0x9273
GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC :: 0x9279
GL_COMPRESSED_SRGB8_ETC2 :: 0x9275
GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 :: 0x9277
GL_COMPRESSED_TEXTURE_FORMATS :: 0x86A3
GL_COMPUTE_SHADER :: 0x91B9
GL_COMPUTE_SHADER_BIT :: 0x00000020
GL_COMPUTE_WORK_GROUP_SIZE :: 0x8267
GL_CONDITION_SATISFIED :: 0x911C
GL_CONSTANT_ALPHA :: 0x8003
GL_CONSTANT_COLOR :: 0x8001
GL_COPY_READ_BUFFER :: 0x8F36
GL_COPY_READ_BUFFER_BINDING :: 0x8F36
GL_COPY_WRITE_BUFFER :: 0x8F37
GL_COPY_WRITE_BUFFER_BINDING :: 0x8F37
GL_CULL_FACE :: 0x0B44
GL_CULL_FACE_MODE :: 0x0B45
GL_CURRENT_PROGRAM :: 0x8B8D
GL_CURRENT_QUERY :: 0x8865
GL_CURRENT_VERTEX_ATTRIB :: 0x8626
GL_CW :: 0x0900
GL_DECR :: 0x1E03
GL_DECR_WRAP :: 0x8508
GL_DELETE_STATUS :: 0x8B80
GL_DEPTH :: 0x1801
GL_DEPTH24_STENCIL8 :: 0x88F0
GL_DEPTH32F_STENCIL8 :: 0x8CAD
GL_DEPTH_ATTACHMENT :: 0x8D00
GL_DEPTH_BITS :: 0x0D56
GL_DEPTH_BUFFER_BIT :: 0x00000100
GL_DEPTH_CLEAR_VALUE :: 0x0B73
GL_DEPTH_COMPONENT :: 0x1902
GL_DEPTH_COMPONENT16 :: 0x81A5
GL_DEPTH_COMPONENT24 :: 0x81A6
GL_DEPTH_COMPONENT32F :: 0x8CAC
GL_DEPTH_FUNC :: 0x0B74
GL_DEPTH_RANGE :: 0x0B70
GL_DEPTH_STENCIL :: 0x84F9
GL_DEPTH_STENCIL_ATTACHMENT :: 0x821A
GL_DEPTH_STENCIL_TEXTURE_MODE :: 0x90EA
GL_DEPTH_TEST :: 0x0B71
GL_DEPTH_WRITEMASK :: 0x0B72
GL_DISPATCH_INDIRECT_BUFFER :: 0x90EE
GL_DISPATCH_INDIRECT_BUFFER_BINDING :: 0x90EF
GL_DITHER :: 0x0BD0
GL_DONT_CARE :: 0x1100
GL_DRAW_BUFFER0 :: 0x8825
GL_DRAW_BUFFER1 :: 0x8826
GL_DRAW_BUFFER10 :: 0x882F
GL_DRAW_BUFFER11 :: 0x8830
GL_DRAW_BUFFER12 :: 0x8831
GL_DRAW_BUFFER13 :: 0x8832
GL_DRAW_BUFFER14 :: 0x8833
GL_DRAW_BUFFER15 :: 0x8834
GL_DRAW_BUFFER2 :: 0x8827
GL_DRAW_BUFFER3 :: 0x8828
GL_DRAW_BUFFER4 :: 0x8829
GL_DRAW_BUFFER5 :: 0x882A
GL_DRAW_BUFFER6 :: 0x882B
GL_DRAW_BUFFER7 :: 0x882C
GL_DRAW_BUFFER8 :: 0x882D
GL_DRAW_BUFFER9 :: 0x882E
GL_DRAW_FRAMEBUFFER :: 0x8CA9
GL_DRAW_FRAMEBUFFER_BINDING :: 0x8CA6
GL_DRAW_INDIRECT_BUFFER :: 0x8F3F
GL_DRAW_INDIRECT_BUFFER_BINDING :: 0x8F43
GL_DST_ALPHA :: 0x0304
GL_DST_COLOR :: 0x0306
GL_DYNAMIC_COPY :: 0x88EA
GL_DYNAMIC_DRAW :: 0x88E8
GL_DYNAMIC_READ :: 0x88E9
GL_ELEMENT_ARRAY_BARRIER_BIT :: 0x00000002
GL_ELEMENT_ARRAY_BUFFER :: 0x8893
GL_ELEMENT_ARRAY_BUFFER_BINDING :: 0x8895
GL_EQUAL :: 0x0202
GL_EXTENSIONS :: 0x1F03
GL_FALSE :: 0
GL_FASTEST :: 0x1101
GL_FIXED :: 0x140C
GL_FLOAT :: 0x1406
GL_FLOAT_32_UNSIGNED_INT_24_8_REV :: 0x8DAD
GL_FLOAT_MAT2 :: 0x8B5A
GL_FLOAT_MAT2x3 :: 0x8B65
GL_FLOAT_MAT2x4 :: 0x8B66
GL_FLOAT_MAT3 :: 0x8B5B
GL_FLOAT_MAT3x2 :: 0x8B67
GL_FLOAT_MAT3x4 :: 0x8B68
GL_FLOAT_MAT4 :: 0x8B5C
GL_FLOAT_MAT4x2 :: 0x8B69
GL_FLOAT_MAT4x3 :: 0x8B6A
GL_FLOAT_VEC2 :: 0x8B50
GL_FLOAT_VEC3 :: 0x8B51
GL_FLOAT_VEC4 :: 0x8B52
GL_FRAGMENT_SHADER :: 0x8B30
GL_FRAGMENT_SHADER_BIT :: 0x00000002
GL_FRAGMENT_SHADER_DERIVATIVE_HINT :: 0x8B8B
GL_FRAMEBUFFER :: 0x8D40
GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE :: 0x8215
GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE :: 0x8214
GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING :: 0x8210
GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE :: 0x8211
GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE :: 0x8216
GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE :: 0x8213
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME :: 0x8CD1
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE :: 0x8CD0
GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE :: 0x8212
GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE :: 0x8217
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE :: 0x8CD3
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER :: 0x8CD4
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL :: 0x8CD2
GL_FRAMEBUFFER_BARRIER_BIT :: 0x00000400
GL_FRAMEBUFFER_BINDING :: 0x8CA6
GL_FRAMEBUFFER_COMPLETE :: 0x8CD5
GL_FRAMEBUFFER_DEFAULT :: 0x8218
GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS :: 0x9314
GL_FRAMEBUFFER_DEFAULT_HEIGHT :: 0x9311
GL_FRAMEBUFFER_DEFAULT_SAMPLES :: 0x9313
GL_FRAMEBUFFER_DEFAULT_WIDTH :: 0x9310
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT :: 0x8CD6
GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS :: 0x8CD9
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT :: 0x8CD7
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE :: 0x8D56
GL_FRAMEBUFFER_UNDEFINED :: 0x8219
GL_FRAMEBUFFER_UNSUPPORTED :: 0x8CDD
GL_FRONT :: 0x0404
GL_FRONT_AND_BACK :: 0x0408
GL_FRONT_FACE :: 0x0B46
GL_FUNC_ADD :: 0x8006
GL_FUNC_REVERSE_SUBTRACT :: 0x800B
GL_FUNC_SUBTRACT :: 0x800A
GL_GENERATE_MIPMAP_HINT :: 0x8192
GL_GEQUAL :: 0x0206
GL_GREATER :: 0x0204
GL_GREEN :: 0x1904
GL_GREEN_BITS :: 0x0D53
GL_HALF_FLOAT :: 0x140B
GL_HIGH_FLOAT :: 0x8DF2
GL_HIGH_INT :: 0x8DF5
GL_IMAGE_2D :: 0x904D
GL_IMAGE_2D_ARRAY :: 0x9053
GL_IMAGE_3D :: 0x904E
GL_IMAGE_BINDING_ACCESS :: 0x8F3E
GL_IMAGE_BINDING_FORMAT :: 0x906E
GL_IMAGE_BINDING_LAYER :: 0x8F3D
GL_IMAGE_BINDING_LAYERED :: 0x8F3C
GL_IMAGE_BINDING_LEVEL :: 0x8F3B
GL_IMAGE_BINDING_NAME :: 0x8F3A
GL_IMAGE_CUBE :: 0x9050
GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS :: 0x90C9
GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE :: 0x90C8
GL_IMAGE_FORMAT_COMPATIBILITY_TYPE :: 0x90C7
GL_IMPLEMENTATION_COLOR_READ_FORMAT :: 0x8B9B
GL_IMPLEMENTATION_COLOR_READ_TYPE :: 0x8B9A
GL_INCR :: 0x1E02
GL_INCR_WRAP :: 0x8507
GL_INFO_LOG_LENGTH :: 0x8B84
GL_INT :: 0x1404
GL_INTERLEAVED_ATTRIBS :: 0x8C8C
GL_INT_2_10_10_10_REV :: 0x8D9F
GL_INT_IMAGE_2D :: 0x9058
GL_INT_IMAGE_2D_ARRAY :: 0x905E
GL_INT_IMAGE_3D :: 0x9059
GL_INT_IMAGE_CUBE :: 0x905B
GL_INT_SAMPLER_2D :: 0x8DCA
GL_INT_SAMPLER_2D_ARRAY :: 0x8DCF
GL_INT_SAMPLER_2D_MULTISAMPLE :: 0x9109
GL_INT_SAMPLER_3D :: 0x8DCB
GL_INT_SAMPLER_CUBE :: 0x8DCC
GL_INT_VEC2 :: 0x8B53
GL_INT_VEC3 :: 0x8B54
GL_INT_VEC4 :: 0x8B55
GL_INVALID_ENUM :: 0x0500
GL_INVALID_FRAMEBUFFER_OPERATION :: 0x0506
GL_INVALID_INDEX :: 0xFFFFFFFF
GL_INVALID_OPERATION :: 0x0502
GL_INVALID_VALUE :: 0x0501
GL_INVERT :: 0x150A
GL_IS_ROW_MAJOR :: 0x9300
GL_KEEP :: 0x1E00
GL_LEQUAL :: 0x0203
GL_LESS :: 0x0201
GL_LINEAR :: 0x2601
GL_LINEAR_MIPMAP_LINEAR :: 0x2703
GL_LINEAR_MIPMAP_NEAREST :: 0x2701
GL_LINES :: 0x0001
GL_LINE_LOOP :: 0x0002
GL_LINE_STRIP :: 0x0003
GL_LINE_WIDTH :: 0x0B21
GL_LINK_STATUS :: 0x8B82
GL_LOCATION :: 0x930E
GL_LOW_FLOAT :: 0x8DF0
GL_LOW_INT :: 0x8DF3
GL_LUMINANCE :: 0x1909
GL_LUMINANCE_ALPHA :: 0x190A
GL_MAJOR_VERSION :: 0x821B
GL_MAP_FLUSH_EXPLICIT_BIT :: 0x0010
GL_MAP_INVALIDATE_BUFFER_BIT :: 0x0008
GL_MAP_INVALIDATE_RANGE_BIT :: 0x0004
GL_MAP_READ_BIT :: 0x0001
GL_MAP_UNSYNCHRONIZED_BIT :: 0x0020
GL_MAP_WRITE_BIT :: 0x0002
GL_MATRIX_STRIDE :: 0x92FF
GL_MAX :: 0x8008
GL_MAX_3D_TEXTURE_SIZE :: 0x8073
GL_MAX_ARRAY_TEXTURE_LAYERS :: 0x88FF
GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS :: 0x92DC
GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE :: 0x92D8
GL_MAX_COLOR_ATTACHMENTS :: 0x8CDF
GL_MAX_COLOR_TEXTURE_SAMPLES :: 0x910E
GL_MAX_COMBINED_ATOMIC_COUNTERS :: 0x92D7
GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS :: 0x92D1
GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS :: 0x8266
GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS :: 0x8A33
GL_MAX_COMBINED_IMAGE_UNIFORMS :: 0x90CF
GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS :: 0x8F39
GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES :: 0x8F39
GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS :: 0x90DC
GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS :: 0x8B4D
GL_MAX_COMBINED_UNIFORM_BLOCKS :: 0x8A2E
GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS :: 0x8A31
GL_MAX_COMPUTE_ATOMIC_COUNTERS :: 0x8265
GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS :: 0x8264
GL_MAX_COMPUTE_IMAGE_UNIFORMS :: 0x91BD
GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS :: 0x90DB
GL_MAX_COMPUTE_SHARED_MEMORY_SIZE :: 0x8262
GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS :: 0x91BC
GL_MAX_COMPUTE_UNIFORM_BLOCKS :: 0x91BB
GL_MAX_COMPUTE_UNIFORM_COMPONENTS :: 0x8263
GL_MAX_COMPUTE_WORK_GROUP_COUNT :: 0x91BE
GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS :: 0x90EB
GL_MAX_COMPUTE_WORK_GROUP_SIZE :: 0x91BF
GL_MAX_CUBE_MAP_TEXTURE_SIZE :: 0x851C
GL_MAX_DEPTH_TEXTURE_SAMPLES :: 0x910F
GL_MAX_DRAW_BUFFERS :: 0x8824
GL_MAX_ELEMENTS_INDICES :: 0x80E9
GL_MAX_ELEMENTS_VERTICES :: 0x80E8
GL_MAX_ELEMENT_INDEX :: 0x8D6B
GL_MAX_FRAGMENT_ATOMIC_COUNTERS :: 0x92D6
GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS :: 0x92D0
GL_MAX_FRAGMENT_IMAGE_UNIFORMS :: 0x90CE
GL_MAX_FRAGMENT_INPUT_COMPONENTS :: 0x9125
GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS :: 0x90DA
GL_MAX_FRAGMENT_UNIFORM_BLOCKS :: 0x8A2D
GL_MAX_FRAGMENT_UNIFORM_COMPONENTS :: 0x8B49
GL_MAX_FRAGMENT_UNIFORM_VECTORS :: 0x8DFD
GL_MAX_FRAMEBUFFER_HEIGHT :: 0x9316
GL_MAX_FRAMEBUFFER_SAMPLES :: 0x9318
GL_MAX_FRAMEBUFFER_WIDTH :: 0x9315
GL_MAX_IMAGE_UNITS :: 0x8F38
GL_MAX_INTEGER_SAMPLES :: 0x9110
GL_MAX_NAME_LENGTH :: 0x92F6
GL_MAX_NUM_ACTIVE_VARIABLES :: 0x92F7
GL_MAX_PROGRAM_TEXEL_OFFSET :: 0x8905
GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET :: 0x8E5F
GL_MAX_RENDERBUFFER_SIZE :: 0x84E8
GL_MAX_SAMPLES :: 0x8D57
GL_MAX_SAMPLE_MASK_WORDS :: 0x8E59
GL_MAX_SERVER_WAIT_TIMEOUT :: 0x9111
GL_MAX_SHADER_STORAGE_BLOCK_SIZE :: 0x90DE
GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS :: 0x90DD
GL_MAX_TEXTURE_IMAGE_UNITS :: 0x8872
GL_MAX_TEXTURE_LOD_BIAS :: 0x84FD
GL_MAX_TEXTURE_SIZE :: 0x0D33
GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS :: 0x8C8A
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS :: 0x8C8B
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS :: 0x8C80
GL_MAX_UNIFORM_BLOCK_SIZE :: 0x8A30
GL_MAX_UNIFORM_BUFFER_BINDINGS :: 0x8A2F
GL_MAX_UNIFORM_LOCATIONS :: 0x826E
GL_MAX_VARYING_COMPONENTS :: 0x8B4B
GL_MAX_VARYING_FLOATS :: 0x8B4B
GL_MAX_VARYING_VECTORS :: 0x8DFC
GL_MAX_VERTEX_ATOMIC_COUNTERS :: 0x92D2
GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS :: 0x92CC
GL_MAX_VERTEX_ATTRIBS :: 0x8869
GL_MAX_VERTEX_ATTRIB_BINDINGS :: 0x82DA
GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET :: 0x82D9
GL_MAX_VERTEX_ATTRIB_STRIDE :: 0x82E5
GL_MAX_VERTEX_IMAGE_UNIFORMS :: 0x90CA
GL_MAX_VERTEX_OUTPUT_COMPONENTS :: 0x9122
GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS :: 0x90D6
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS :: 0x8B4C
GL_MAX_VERTEX_UNIFORM_BLOCKS :: 0x8A2B
GL_MAX_VERTEX_UNIFORM_COMPONENTS :: 0x8B4A
GL_MAX_VERTEX_UNIFORM_VECTORS :: 0x8DFB
GL_MAX_VIEWPORT_DIMS :: 0x0D3A
GL_MEDIUM_FLOAT :: 0x8DF1
GL_MEDIUM_INT :: 0x8DF4
GL_MIN :: 0x8007
GL_MINOR_VERSION :: 0x821C
GL_MIN_PROGRAM_TEXEL_OFFSET :: 0x8904
GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET :: 0x8E5E
GL_MIRRORED_REPEAT :: 0x8370
GL_NAME_LENGTH :: 0x92F9
GL_NEAREST :: 0x2600
GL_NEAREST_MIPMAP_LINEAR :: 0x2702
GL_NEAREST_MIPMAP_NEAREST :: 0x2700
GL_NEVER :: 0x0200
GL_NICEST :: 0x1102
GL_NONE :: 0
GL_NOTEQUAL :: 0x0205
GL_NO_ERROR :: 0
GL_NUM_ACTIVE_VARIABLES :: 0x9304
GL_NUM_COMPRESSED_TEXTURE_FORMATS :: 0x86A2
GL_NUM_EXTENSIONS :: 0x821D
GL_NUM_PROGRAM_BINARY_FORMATS :: 0x87FE
GL_NUM_SAMPLE_COUNTS :: 0x9380
GL_NUM_SHADER_BINARY_FORMATS :: 0x8DF9
GL_OBJECT_TYPE :: 0x9112
GL_OFFSET :: 0x92FC
GL_ONE :: 1
GL_ONE_MINUS_CONSTANT_ALPHA :: 0x8004
GL_ONE_MINUS_CONSTANT_COLOR :: 0x8002
GL_ONE_MINUS_DST_ALPHA :: 0x0305
GL_ONE_MINUS_DST_COLOR :: 0x0307
GL_ONE_MINUS_SRC_ALPHA :: 0x0303
GL_ONE_MINUS_SRC_COLOR :: 0x0301
GL_OUT_OF_MEMORY :: 0x0505
GL_PACK_ALIGNMENT :: 0x0D05
GL_PACK_ROW_LENGTH :: 0x0D02
GL_PACK_SKIP_PIXELS :: 0x0D04
GL_PACK_SKIP_ROWS :: 0x0D03
GL_PIXEL_BUFFER_BARRIER_BIT :: 0x00000080
GL_PIXEL_PACK_BUFFER :: 0x88EB
GL_PIXEL_PACK_BUFFER_BINDING :: 0x88ED
GL_PIXEL_UNPACK_BUFFER :: 0x88EC
GL_PIXEL_UNPACK_BUFFER_BINDING :: 0x88EF
GL_POINTS :: 0x0000
GL_POLYGON_OFFSET_FACTOR :: 0x8038
GL_POLYGON_OFFSET_FILL :: 0x8037
GL_POLYGON_OFFSET_UNITS :: 0x2A00
GL_PRIMITIVE_RESTART_FIXED_INDEX :: 0x8D69
GL_PROGRAM_BINARY_FORMATS :: 0x87FF
GL_PROGRAM_BINARY_LENGTH :: 0x8741
GL_PROGRAM_BINARY_RETRIEVABLE_HINT :: 0x8257
GL_PROGRAM_INPUT :: 0x92E3
GL_PROGRAM_OUTPUT :: 0x92E4
GL_PROGRAM_PIPELINE_BINDING :: 0x825A
GL_PROGRAM_SEPARABLE :: 0x8258
GL_QUERY_RESULT :: 0x8866
GL_QUERY_RESULT_AVAILABLE :: 0x8867
GL_R11F_G11F_B10F :: 0x8C3A
GL_R16F :: 0x822D
GL_R16I :: 0x8233
GL_R16UI :: 0x8234
GL_R32F :: 0x822E
GL_R32I :: 0x8235
GL_R32UI :: 0x8236
GL_R8 :: 0x8229
GL_R8I :: 0x8231
GL_R8UI :: 0x8232
GL_R8_SNORM :: 0x8F94
GL_RASTERIZER_DISCARD :: 0x8C89
GL_READ_BUFFER :: 0x0C02
GL_READ_FRAMEBUFFER :: 0x8CA8
GL_READ_FRAMEBUFFER_BINDING :: 0x8CAA
GL_READ_ONLY :: 0x88B8
GL_READ_WRITE :: 0x88BA
GL_RED :: 0x1903
GL_RED_BITS :: 0x0D52
GL_RED_INTEGER :: 0x8D94
GL_REFERENCED_BY_COMPUTE_SHADER :: 0x930B
GL_REFERENCED_BY_FRAGMENT_SHADER :: 0x930A
GL_REFERENCED_BY_VERTEX_SHADER :: 0x9306
GL_RENDERBUFFER :: 0x8D41
GL_RENDERBUFFER_ALPHA_SIZE :: 0x8D53
GL_RENDERBUFFER_BINDING :: 0x8CA7
GL_RENDERBUFFER_BLUE_SIZE :: 0x8D52
GL_RENDERBUFFER_DEPTH_SIZE :: 0x8D54
GL_RENDERBUFFER_GREEN_SIZE :: 0x8D51
GL_RENDERBUFFER_HEIGHT :: 0x8D43
GL_RENDERBUFFER_INTERNAL_FORMAT :: 0x8D44
GL_RENDERBUFFER_RED_SIZE :: 0x8D50
GL_RENDERBUFFER_SAMPLES :: 0x8CAB
GL_RENDERBUFFER_STENCIL_SIZE :: 0x8D55
GL_RENDERBUFFER_WIDTH :: 0x8D42
GL_RENDERER :: 0x1F01
GL_REPEAT :: 0x2901
GL_REPLACE :: 0x1E01
GL_RG :: 0x8227
GL_RG16F :: 0x822F
GL_RG16I :: 0x8239
GL_RG16UI :: 0x823A
GL_RG32F :: 0x8230
GL_RG32I :: 0x823B
GL_RG32UI :: 0x823C
GL_RG8 :: 0x822B
GL_RG8I :: 0x8237
GL_RG8UI :: 0x8238
GL_RG8_SNORM :: 0x8F95
GL_RGB :: 0x1907
GL_RGB10_A2 :: 0x8059
GL_RGB10_A2UI :: 0x906F
GL_RGB16F :: 0x881B
GL_RGB16I :: 0x8D89
GL_RGB16UI :: 0x8D77
GL_RGB32F :: 0x8815
GL_RGB32I :: 0x8D83
GL_RGB32UI :: 0x8D71
GL_RGB565 :: 0x8D62
GL_RGB5_A1 :: 0x8057
GL_RGB8 :: 0x8051
GL_RGB8I :: 0x8D8F
GL_RGB8UI :: 0x8D7D
GL_RGB8_SNORM :: 0x8F96
GL_RGB9_E5 :: 0x8C3D
GL_RGBA :: 0x1908
GL_RGBA16F :: 0x881A
GL_RGBA16I :: 0x8D88
GL_RGBA16UI :: 0x8D76
GL_RGBA32F :: 0x8814
GL_RGBA32I :: 0x8D82
GL_RGBA32UI :: 0x8D70
GL_RGBA4 :: 0x8056
GL_RGBA8 :: 0x8058
GL_RGBA8I :: 0x8D8E
GL_RGBA8UI :: 0x8D7C
GL_RGBA8_SNORM :: 0x8F97
GL_RGBA_INTEGER :: 0x8D99
GL_RGB_INTEGER :: 0x8D98
GL_RG_INTEGER :: 0x8228
GL_SAMPLER_2D :: 0x8B5E
GL_SAMPLER_2D_ARRAY :: 0x8DC1
GL_SAMPLER_2D_ARRAY_SHADOW :: 0x8DC4
GL_SAMPLER_2D_MULTISAMPLE :: 0x9108
GL_SAMPLER_2D_SHADOW :: 0x8B62
GL_SAMPLER_3D :: 0x8B5F
GL_SAMPLER_BINDING :: 0x8919
GL_SAMPLER_CUBE :: 0x8B60
GL_SAMPLER_CUBE_SHADOW :: 0x8DC5
GL_SAMPLES :: 0x80A9
GL_SAMPLE_ALPHA_TO_COVERAGE :: 0x809E
GL_SAMPLE_BUFFERS :: 0x80A8
GL_SAMPLE_COVERAGE :: 0x80A0
GL_SAMPLE_COVERAGE_INVERT :: 0x80AB
GL_SAMPLE_COVERAGE_VALUE :: 0x80AA
GL_SAMPLE_MASK :: 0x8E51
GL_SAMPLE_MASK_VALUE :: 0x8E52
GL_SAMPLE_POSITION :: 0x8E50
GL_SCISSOR_BOX :: 0x0C10
GL_SCISSOR_TEST :: 0x0C11
GL_SEPARATE_ATTRIBS :: 0x8C8D
GL_SHADER_BINARY_FORMATS :: 0x8DF8
GL_SHADER_COMPILER :: 0x8DFA
GL_SHADER_IMAGE_ACCESS_BARRIER_BIT :: 0x00000020
GL_SHADER_SOURCE_LENGTH :: 0x8B88
GL_SHADER_STORAGE_BARRIER_BIT :: 0x00002000
GL_SHADER_STORAGE_BLOCK :: 0x92E6
GL_SHADER_STORAGE_BUFFER :: 0x90D2
GL_SHADER_STORAGE_BUFFER_BINDING :: 0x90D3
GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT :: 0x90DF
GL_SHADER_STORAGE_BUFFER_SIZE :: 0x90D5
GL_SHADER_STORAGE_BUFFER_START :: 0x90D4
GL_SHADER_TYPE :: 0x8B4F
GL_SHADING_LANGUAGE_VERSION :: 0x8B8C
GL_SHORT :: 0x1402
GL_SIGNALED :: 0x9119
GL_SIGNED_NORMALIZED :: 0x8F9C
GL_SRC_ALPHA :: 0x0302
GL_SRC_ALPHA_SATURATE :: 0x0308
GL_SRC_COLOR :: 0x0300
GL_SRGB :: 0x8C40
GL_SRGB8 :: 0x8C41
GL_SRGB8_ALPHA8 :: 0x8C43
GL_STATIC_COPY :: 0x88E6
GL_STATIC_DRAW :: 0x88E4
GL_STATIC_READ :: 0x88E5
GL_STENCIL :: 0x1802
GL_STENCIL_ATTACHMENT :: 0x8D20
GL_STENCIL_BACK_FAIL :: 0x8801
GL_STENCIL_BACK_FUNC :: 0x8800
GL_STENCIL_BACK_PASS_DEPTH_FAIL :: 0x8802
GL_STENCIL_BACK_PASS_DEPTH_PASS :: 0x8803
GL_STENCIL_BACK_REF :: 0x8CA3
GL_STENCIL_BACK_VALUE_MASK :: 0x8CA4
GL_STENCIL_BACK_WRITEMASK :: 0x8CA5
GL_STENCIL_BITS :: 0x0D57
GL_STENCIL_BUFFER_BIT :: 0x00000400
GL_STENCIL_CLEAR_VALUE :: 0x0B91
GL_STENCIL_FAIL :: 0x0B94
GL_STENCIL_FUNC :: 0x0B92
GL_STENCIL_INDEX :: 0x1901
GL_STENCIL_INDEX8 :: 0x8D48
GL_STENCIL_PASS_DEPTH_FAIL :: 0x0B95
GL_STENCIL_PASS_DEPTH_PASS :: 0x0B96
GL_STENCIL_REF :: 0x0B97
GL_STENCIL_TEST :: 0x0B90
GL_STENCIL_VALUE_MASK :: 0x0B93
GL_STENCIL_WRITEMASK :: 0x0B98
GL_STREAM_COPY :: 0x88E2
GL_STREAM_DRAW :: 0x88E0
GL_STREAM_READ :: 0x88E1
GL_SUBPIXEL_BITS :: 0x0D50
GL_SYNC_CONDITION :: 0x9113
GL_SYNC_FENCE :: 0x9116
GL_SYNC_FLAGS :: 0x9115
GL_SYNC_FLUSH_COMMANDS_BIT :: 0x00000001
GL_SYNC_GPU_COMMANDS_COMPLETE :: 0x9117
GL_SYNC_STATUS :: 0x9114
GL_TEXTURE :: 0x1702
GL_TEXTURE0 :: 0x84C0
GL_TEXTURE1 :: 0x84C1
GL_TEXTURE10 :: 0x84CA
GL_TEXTURE11 :: 0x84CB
GL_TEXTURE12 :: 0x84CC
GL_TEXTURE13 :: 0x84CD
GL_TEXTURE14 :: 0x84CE
GL_TEXTURE15 :: 0x84CF
GL_TEXTURE16 :: 0x84D0
GL_TEXTURE17 :: 0x84D1
GL_TEXTURE18 :: 0x84D2
GL_TEXTURE19 :: 0x84D3
GL_TEXTURE2 :: 0x84C2
GL_TEXTURE20 :: 0x84D4
GL_TEXTURE21 :: 0x84D5
GL_TEXTURE22 :: 0x84D6
GL_TEXTURE23 :: 0x84D7
GL_TEXTURE24 :: 0x84D8
GL_TEXTURE25 :: 0x84D9
GL_TEXTURE26 :: 0x84DA
GL_TEXTURE27 :: 0x84DB
GL_TEXTURE28 :: 0x84DC
GL_TEXTURE29 :: 0x84DD
GL_TEXTURE3 :: 0x84C3
GL_TEXTURE30 :: 0x84DE
GL_TEXTURE31 :: 0x84DF
GL_TEXTURE4 :: 0x84C4
GL_TEXTURE5 :: 0x84C5
GL_TEXTURE6 :: 0x84C6
GL_TEXTURE7 :: 0x84C7
GL_TEXTURE8 :: 0x84C8
GL_TEXTURE9 :: 0x84C9
GL_TEXTURE_2D :: 0x0DE1
GL_TEXTURE_2D_ARRAY :: 0x8C1A
GL_TEXTURE_2D_MULTISAMPLE :: 0x9100
GL_TEXTURE_3D :: 0x806F
GL_TEXTURE_ALPHA_SIZE :: 0x805F
GL_TEXTURE_ALPHA_TYPE :: 0x8C13
GL_TEXTURE_BASE_LEVEL :: 0x813C
GL_TEXTURE_BINDING_2D :: 0x8069
GL_TEXTURE_BINDING_2D_ARRAY :: 0x8C1D
GL_TEXTURE_BINDING_2D_MULTISAMPLE :: 0x9104
GL_TEXTURE_BINDING_3D :: 0x806A
GL_TEXTURE_BINDING_CUBE_MAP :: 0x8514
GL_TEXTURE_BLUE_SIZE :: 0x805E
GL_TEXTURE_BLUE_TYPE :: 0x8C12
GL_TEXTURE_COMPARE_FUNC :: 0x884D
GL_TEXTURE_COMPARE_MODE :: 0x884C
GL_TEXTURE_COMPRESSED :: 0x86A1
GL_TEXTURE_CUBE_MAP :: 0x8513
GL_TEXTURE_CUBE_MAP_NEGATIVE_X :: 0x8516
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y :: 0x8518
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z :: 0x851A
GL_TEXTURE_CUBE_MAP_POSITIVE_X :: 0x8515
GL_TEXTURE_CUBE_MAP_POSITIVE_Y :: 0x8517
GL_TEXTURE_CUBE_MAP_POSITIVE_Z :: 0x8519
GL_TEXTURE_DEPTH :: 0x8071
GL_TEXTURE_DEPTH_SIZE :: 0x884A
GL_TEXTURE_DEPTH_TYPE :: 0x8C16
GL_TEXTURE_FETCH_BARRIER_BIT :: 0x00000008
GL_TEXTURE_FIXED_SAMPLE_LOCATIONS :: 0x9107
GL_TEXTURE_GREEN_SIZE :: 0x805D
GL_TEXTURE_GREEN_TYPE :: 0x8C11
GL_TEXTURE_HEIGHT :: 0x1001
GL_TEXTURE_IMMUTABLE_FORMAT :: 0x912F
GL_TEXTURE_IMMUTABLE_LEVELS :: 0x82DF
GL_TEXTURE_INTERNAL_FORMAT :: 0x1003
GL_TEXTURE_MAG_FILTER :: 0x2800
GL_TEXTURE_MAX_LEVEL :: 0x813D
GL_TEXTURE_MAX_LOD :: 0x813B
GL_TEXTURE_MIN_FILTER :: 0x2801
GL_TEXTURE_MIN_LOD :: 0x813A
GL_TEXTURE_RED_SIZE :: 0x805C
GL_TEXTURE_RED_TYPE :: 0x8C10
GL_TEXTURE_SAMPLES :: 0x9106
GL_TEXTURE_SHARED_SIZE :: 0x8C3F
GL_TEXTURE_STENCIL_SIZE :: 0x88F1
GL_TEXTURE_SWIZZLE_A :: 0x8E45
GL_TEXTURE_SWIZZLE_B :: 0x8E44
GL_TEXTURE_SWIZZLE_G :: 0x8E43
GL_TEXTURE_SWIZZLE_R :: 0x8E42
GL_TEXTURE_UPDATE_BARRIER_BIT :: 0x00000100
GL_TEXTURE_WIDTH :: 0x1000
GL_TEXTURE_WRAP_R :: 0x8072
GL_TEXTURE_WRAP_S :: 0x2802
GL_TEXTURE_WRAP_T :: 0x2803
GL_TIMEOUT_EXPIRED :: 0x911B
GL_TIMEOUT_IGNORED :: 0xFFFFFFFFFFFFFFFF
GL_TOP_LEVEL_ARRAY_SIZE :: 0x930C
GL_TOP_LEVEL_ARRAY_STRIDE :: 0x930D
GL_TRANSFORM_FEEDBACK :: 0x8E22
GL_TRANSFORM_FEEDBACK_ACTIVE :: 0x8E24
GL_TRANSFORM_FEEDBACK_BARRIER_BIT :: 0x00000800
GL_TRANSFORM_FEEDBACK_BINDING :: 0x8E25
GL_TRANSFORM_FEEDBACK_BUFFER :: 0x8C8E
GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE :: 0x8E24
GL_TRANSFORM_FEEDBACK_BUFFER_BINDING :: 0x8C8F
GL_TRANSFORM_FEEDBACK_BUFFER_MODE :: 0x8C7F
GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED :: 0x8E23
GL_TRANSFORM_FEEDBACK_BUFFER_SIZE :: 0x8C85
GL_TRANSFORM_FEEDBACK_BUFFER_START :: 0x8C84
GL_TRANSFORM_FEEDBACK_PAUSED :: 0x8E23
GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN :: 0x8C88
GL_TRANSFORM_FEEDBACK_VARYING :: 0x92F4
GL_TRANSFORM_FEEDBACK_VARYINGS :: 0x8C83
GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH :: 0x8C76
GL_TRIANGLES :: 0x0004
GL_TRIANGLE_FAN :: 0x0006
GL_TRIANGLE_STRIP :: 0x0005
GL_TRUE :: 1
GL_TYPE :: 0x92FA
GL_UNIFORM :: 0x92E1
GL_UNIFORM_ARRAY_STRIDE :: 0x8A3C
GL_UNIFORM_BARRIER_BIT :: 0x00000004
GL_UNIFORM_BLOCK :: 0x92E2
GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS :: 0x8A42
GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES :: 0x8A43
GL_UNIFORM_BLOCK_BINDING :: 0x8A3F
GL_UNIFORM_BLOCK_DATA_SIZE :: 0x8A40
GL_UNIFORM_BLOCK_INDEX :: 0x8A3A
GL_UNIFORM_BLOCK_NAME_LENGTH :: 0x8A41
GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER :: 0x8A46
GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER :: 0x8A44
GL_UNIFORM_BUFFER :: 0x8A11
GL_UNIFORM_BUFFER_BINDING :: 0x8A28
GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT :: 0x8A34
GL_UNIFORM_BUFFER_SIZE :: 0x8A2A
GL_UNIFORM_BUFFER_START :: 0x8A29
GL_UNIFORM_IS_ROW_MAJOR :: 0x8A3E
GL_UNIFORM_MATRIX_STRIDE :: 0x8A3D
GL_UNIFORM_NAME_LENGTH :: 0x8A39
GL_UNIFORM_OFFSET :: 0x8A3B
GL_UNIFORM_SIZE :: 0x8A38
GL_UNIFORM_TYPE :: 0x8A37
GL_UNPACK_ALIGNMENT :: 0x0CF5
GL_UNPACK_IMAGE_HEIGHT :: 0x806E
GL_UNPACK_ROW_LENGTH :: 0x0CF2
GL_UNPACK_SKIP_IMAGES :: 0x806D
GL_UNPACK_SKIP_PIXELS :: 0x0CF4
GL_UNPACK_SKIP_ROWS :: 0x0CF3
GL_UNSIGNALED :: 0x9118
GL_UNSIGNED_BYTE :: 0x1401
GL_UNSIGNED_INT :: 0x1405
GL_UNSIGNED_INT_10F_11F_11F_REV :: 0x8C3B
GL_UNSIGNED_INT_24_8 :: 0x84FA
GL_UNSIGNED_INT_2_10_10_10_REV :: 0x8368
GL_UNSIGNED_INT_5_9_9_9_REV :: 0x8C3E
GL_UNSIGNED_INT_ATOMIC_COUNTER :: 0x92DB
GL_UNSIGNED_INT_IMAGE_2D :: 0x9063
GL_UNSIGNED_INT_IMAGE_2D_ARRAY :: 0x9069
GL_UNSIGNED_INT_IMAGE_3D :: 0x9064
GL_UNSIGNED_INT_IMAGE_CUBE :: 0x9066
GL_UNSIGNED_INT_SAMPLER_2D :: 0x8DD2
GL_UNSIGNED_INT_SAMPLER_2D_ARRAY :: 0x8DD7
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE :: 0x910A
GL_UNSIGNED_INT_SAMPLER_3D :: 0x8DD3
GL_UNSIGNED_INT_SAMPLER_CUBE :: 0x8DD4
GL_UNSIGNED_INT_VEC2 :: 0x8DC6
GL_UNSIGNED_INT_VEC3 :: 0x8DC7
GL_UNSIGNED_INT_VEC4 :: 0x8DC8
GL_UNSIGNED_NORMALIZED :: 0x8C17
GL_UNSIGNED_SHORT :: 0x1403
GL_UNSIGNED_SHORT_4_4_4_4 :: 0x8033
GL_UNSIGNED_SHORT_5_5_5_1 :: 0x8034
GL_UNSIGNED_SHORT_5_6_5 :: 0x8363
GL_VALIDATE_STATUS :: 0x8B83
GL_VENDOR :: 0x1F00
GL_VERSION :: 0x1F02
GL_VERTEX_ARRAY_BINDING :: 0x85B5
GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT :: 0x00000001
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING :: 0x889F
GL_VERTEX_ATTRIB_ARRAY_DIVISOR :: 0x88FE
GL_VERTEX_ATTRIB_ARRAY_ENABLED :: 0x8622
GL_VERTEX_ATTRIB_ARRAY_INTEGER :: 0x88FD
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED :: 0x886A
GL_VERTEX_ATTRIB_ARRAY_POINTER :: 0x8645
GL_VERTEX_ATTRIB_ARRAY_SIZE :: 0x8623
GL_VERTEX_ATTRIB_ARRAY_STRIDE :: 0x8624
GL_VERTEX_ATTRIB_ARRAY_TYPE :: 0x8625
GL_VERTEX_ATTRIB_BINDING :: 0x82D4
GL_VERTEX_ATTRIB_RELATIVE_OFFSET :: 0x82D5
GL_VERTEX_BINDING_BUFFER :: 0x8F4F
GL_VERTEX_BINDING_DIVISOR :: 0x82D6
GL_VERTEX_BINDING_OFFSET :: 0x82D7
GL_VERTEX_BINDING_STRIDE :: 0x82D8
GL_VERTEX_SHADER :: 0x8B31
GL_VERTEX_SHADER_BIT :: 0x00000001
GL_VIEWPORT :: 0x0BA2
GL_WAIT_FAILED :: 0x911D
GL_WRITE_ONLY :: 0x88B9
GL_ZERO :: 0
