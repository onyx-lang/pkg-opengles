#load "./module"

use core {package, *}
use cbindgen {*}
use opengles

main :: () {
    path := module_path(#file);

    c_file_path := string.concat(path, "opengles.c");

    result := generate_c_binding(.{
        output_file = c_file_path,
        foreign_block = opengles.foreign_block,

        cast_map = .[],
        name_map = ((name) => aprintf("glad_{}", name)),

        preamble = .[
"""
#define GLAD_GLES2_IMPLEMENTATION
#include "glad.h"
"""
        ],

        custom_implementations = .[
            .{ "glInit",
            """
ONYX_DEF(glInit, (LONG), ()) {
    GLADloadfunc load_sym = (GLADloadfunc) params->data[0].of.i64;
    gladLoadGLES2(load_sym);
    return NULL;
}
            """}
        ],
    });

    if !result {
        os.exit(1);
    }

    result = compile_c_file(c_file_path, string.concat(path, "onyx_opengles"));
    if !result {
        os.exit(1);
    }

    os.remove_file(c_file_path);
}
